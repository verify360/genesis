{"version":3,"file":"static/js/215.6e39b608.chunk.js","mappings":"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","sources":["component/TextFormatter/TextFormatter.js","views/MasterData/ClientMaster/AcknowledgeForm.js","views/MasterData/ClientMaster/AddEditForm.js","views/MasterData/ClientMaster/AddTermsToClient.js","views/MasterData/ClientMaster/index.js"],"sourcesContent":["import React from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport classNames from 'classnames';\n\nconst TextFormatter = (props) => {\n  const { value, onChange, className, wrapperClass, placeholder } = props;\n\n  const modules = {\n    toolbar: {\n      container: [\n        ['bold', 'italic', 'underline', 'strike', 'link', 'blockquote'],\n        [{ size: ['small', false, 'large', 'huge'] }, { color: [] }],\n        [{ list: 'ordered' }, { list: 'bullet' }, { align: [] }],\n      ],\n    },\n    clipboard: { matchVisual: false },\n  };\n\n  const formats = [\n    'bold',\n    'italic',\n    'underline',\n    'strike',\n    'link',\n    'blockquote',\n    'size',\n    'color',\n    'list',\n    'bullet',\n    'align',\n  ];\n\n  return (\n    <div\n      className={classNames('react-text-formatter w-full h-full', wrapperClass)}\n    >\n      <ReactQuill\n        theme='snow'\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        modules={modules}\n        formats={formats}\n        className={classNames('react-quill', className)}\n      />\n    </div>\n  );\n};\nexport default TextFormatter;\n","import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport { Box, Button, Divider, Typography } from \"@mui/material\";\nimport RequestsApi from \"api/requests\";\nimport TextFormatter from \"component/TextFormatter/TextFormatter\";\nimport { find, isEmpty } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { toastMessage } from \"views/Utils/Common\";\n\nconst AcknowledgeForm = ({ id, handleClose }) => {\n    const [acknowledgeDetail, setAcknowledgeDetail] = useState({\n      uploadedFileData: '',\n      textInputData: '',\n    });\n    const [clientDetail, setClientDetail] = useState([]);\n  \n    useEffect(() => {\n      try {\n        let response = RequestsApi.ListClients();\n        response.then((resp) => {\n          let resData = JSON.parse(resp.data.data);\n          setClientDetail(resData);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }, []);\n  \n    useEffect(() => {\n      const clientData = find(clientDetail, (data) => data?.id === id);\n      const containsFile = clientData?.candidateAuthForm?.startsWith('file:')\n        ? {\n            ...acknowledgeDetail,\n            uploadedFileData: clientData?.candidateAuthForm.substring(5).trim(),\n          }\n        : {\n            ...acknowledgeDetail,\n            textInputData: clientData?.candidateAuthForm,\n          };\n  \n      setAcknowledgeDetail(containsFile);\n    }, [clientDetail]);\n  \n    const handleSubmitData = () => {\n      if (\n        !isEmpty(acknowledgeDetail?.uploadedFileData) &&\n        !isEmpty(acknowledgeDetail?.textInputData)\n      ) {\n        toast.info(\n          'Please select either the option to upload a file or utilize the text input feature.'\n        );\n      } else {\n        let data = {\n          table_name: 'clients',\n          field_to_update: 'candidateAuthForm',\n          new_value: isEmpty(acknowledgeDetail?.textInputData)\n            ? `file: ${acknowledgeDetail?.uploadedFileData}`\n            : acknowledgeDetail?.textInputData,\n          table_id: id,\n        };\n  \n        try {\n          let response = RequestsApi.UpdateData(data);\n          response.then((resp) => {\n            if (resp?.status === 200) {\n              toastMessage('Client report updated successfully');\n              handleClose();\n            }\n          });\n        } catch (error) {\n          console.error('Error updating record :', error);\n        }\n      }\n    };\n  \n    const handleFileChange = (e) => {\n      try {\n        RequestsApi.handleFileUpload(e).then((res) => {\n          if (res?.status === 200) {\n            setAcknowledgeDetail({\n              ...acknowledgeDetail,\n              uploadedFileData: res?.data?.filename,\n            });\n          }\n        });\n      } catch (e) {\n        console.error('error ocuured:', e);\n      }\n    };\n  \n    const UploadFileInput = {\n      padding: '5px',\n      border: '1px solid silver',\n      width: '100%',\n      borderRadius: '5px',\n      cursor: 'pointer',\n      display: 'flex',\n    };\n  \n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <div\n            style={{\n              display: 'flex',\n              paddingBottom: '1rem',\n            }}\n          >\n            <h2>Report</h2>\n          </div>\n          <div style={{ ...UploadFileInput }}>\n            <input\n              type='file'\n              id='fileInput'\n              accept='.pdf'\n              style={{\n                display: 'none',\n              }}\n              onChange={(e) => handleFileChange(e)}\n            />\n            <button onClick={() => document.getElementById('fileInput').click()}>\n              Choose file\n            </button>\n            {acknowledgeDetail?.uploadedFileData && (\n              <div\n                style={{\n                  display: 'flex',\n                  paddingLeft: '0.6rem',\n                  paddingTop: '0.2rem',\n                }}\n              >\n                <span>{acknowledgeDetail?.uploadedFileData}</span>\n                <span\n                  onClick={() => {\n                    setAcknowledgeDetail({\n                      ...acknowledgeDetail,\n                      uploadedFileData: '',\n                    });\n                  }}\n                >\n                  {' '}\n                  <CancelOutlinedIcon\n                    sx={{ fontSize: '1.25rem', paddingTop: '0.1rem' }}\n                  />\n                </span>\n              </div>\n            )}\n          </div>\n          <Box display='flex' alignItems='center' textAlign='center' marginY={2}>\n            <Divider flexItem style={{ flexGrow: 1 }} />\n            <Typography variant='body1' color='textSecondary' sx={{ marginX: 2 }}>\n              OR\n            </Typography>\n            <Divider flexItem style={{ flexGrow: 1 }} />\n          </Box>\n          <TextFormatter\n            placeholder='Enter your text here'\n            onChange={(val) =>\n              setAcknowledgeDetail({\n                ...acknowledgeDetail,\n                textInputData: val !== '<p><br></p>' ? val : '',\n              })\n            }\n            value={acknowledgeDetail?.textInputData}\n          />\n        </div>\n        <div\n          style={{ display: 'flex', gap: '0.5rem', justifyContent: 'flex-end' }}\n        >\n          <Button\n            color='primary'\n            variant='contained'\n            onClick={() => handleClose()}\n          >\n            Cancel\n          </Button>\n          <Button\n            type='submit'\n            color='primary'\n            variant='contained'\n            onClick={handleSubmitData}\n            disabled={\n              isEmpty(acknowledgeDetail?.uploadedFileData) &&\n              isEmpty(acknowledgeDetail?.textInputData)\n            }\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n    );\n  };\n  export default AcknowledgeForm;","import {\n  Box,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport RequestsApi from 'api/requests';\nimport { Field, FormikProvider, useFormik } from 'formik';\nimport { omit } from 'lodash';\nimport { useState } from 'react';\nimport { countryList, handleTextTranform, toastMessage } from 'views/Utils/Common';\nimport * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  client_name: Yup.string().required('Required'),\n  contact_name: Yup.string().required('Required'),\n  email: Yup.string().required('Required'),\n  phone: Yup.string().required('Required'),\n  fin_contact_name: Yup.string().required('Required'),\n  fin_email: Yup.string().required('Required'),\n  fin_phone: Yup.string().required('Required'),\n  address: Yup.string().required('Required'),\n  country: Yup.string().required('Required'),\n});\n\nconst AddEditForm = ({ id, clients, handleClose, fetchData }) => {\n  const [error, setError] = useState('');\n  const clientRows = clients;\n\n  function addClient(data) {\n    try {\n      let response = RequestsApi.mClient({\n        data: data,\n      });\n\n      response.then((res) => {\n        if (res?.status === 200) {\n          toastMessage('Client updated succesfully');\n          fetchData();\n          handleClose();\n        }\n      });\n\n      if (response.data && response.data.success === false) {\n        return setError(response.data.msg);\n      }\n    } catch (err) {\n      if (err.response) {\n        return setError(err.response.data.msg);\n      }\n      return setError('There has been an error.');\n    }\n  }\n\n  const InputStyle = {\n    width: '300px',\n    marginBottom: '15px',\n  };\n\n  const eRow = clients.filter((row) => row.id === id)[0];\n\n  const formik = useFormik({\n    initialValues: eRow || {\n      client_name: '',\n      contact_name: '',\n      client_type: '',\n      email: '',\n      phone: '',\n      parent_client: 0,\n      fin_contact_name: '',\n      fin_email: '',\n      fin_phone: '',\n      address: '',\n      country: '',\n      active: false,\n      approveToClose: false,\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      alert(JSON.stringify(values, null, 2));\n      const newRows = clientRows.map((obj) => {\n        // if id equals 2 replace object\n        if (obj.id === values.id) {\n          return values;\n        }\n\n        // otherwise return the object as is\n        return obj;\n      });\n\n      values.parent_client =\n        values.parent_client === null || values.parent_client == ''\n          ? 0\n          : values.parent_client;\n      // setRows(newRows);\n      addClient(values);\n      handleClose();\n    },\n  });\n\n  clients = clients.filter((row) => row.id !== id);\n\n  return (\n    <FormikProvider value={formik}>\n      <form onSubmit={formik.handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item sm={6}>\n            <h2>Manage Client</h2>\n            <Typography variant='h6'>General Information</Typography>\n            <p></p>\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='client_name'\n              label='Client Name'\n              fullWidth\n              onChange={(e) =>\n                formik?.setFieldValue(\n                  'client_name',\n                  handleTextTranform(e?.target?.value)\n                )\n              }\n              value={formik.values.client_name || ''}\n              error={\n                formik.touched.client_name && Boolean(formik.errors.client_name)\n              }\n              helperText={\n                formik.touched.client_name && formik.errors.client_name\n              }\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='contact_name'\n              label='Contact Name'\n              fullWidth\n              onChange={(e) => formik?.setFieldValue(\n                'contact_name',\n                handleTextTranform(e?.target?.value)\n              )}\n              value={formik.values.contact_name || ''}\n              error={\n                formik.touched.contact_name &&\n                Boolean(formik.errors.contact_name)\n              }\n              helperText={\n                formik.touched.contact_name && formik.errors.contact_name\n              }\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='email'\n              label='Email'\n              fullWidth\n              onChange={formik.handleChange}\n              value={formik.values.email}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              helperText={formik.touched.email && formik.errors.email}\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='phone'\n              label='Phone'\n              fullWidth\n              onChange={formik.handleChange}\n              value={formik.values.phone}\n              error={formik.touched.phone && Boolean(formik.errors.phone)}\n              helperText={formik.touched.phone && formik.errors.phone}\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='address'\n              label='Address'\n              fullWidth\n              onChange={formik.handleChange}\n              value={formik.values.address}\n              error={formik.touched.address && Boolean(formik.errors.address)}\n              helperText={formik.touched.address && formik.errors.address}\n            />\n            <FormControl fullWidth>\n              <InputLabel id='select-label'>Select Country</InputLabel>\n              <Select\n                id='country'\n                name='country'\n                style={{ ...InputStyle }}\n                fontSize='sm'\n                fullWidth\n                label='Country'\n                width='250px'\n                variant='outlined'\n                onChange={formik.handleChange}\n                value={formik.values.country || ''}\n                error={formik.touched.country && Boolean(formik.errors.country)}\n              >\n                {countryList.map((option, i) => (\n                  <MenuItem value={option} key={i}>\n                    {option}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl fullWidth>\n              <InputLabel id='select-label'>Select Client Type</InputLabel>\n              <Select\n                name='client_type'\n                id='client_type'\n                label='Select Client Type'\n                labelId='clientLabel'\n                className='selectfield'\n                value={formik.values.client_type}\n                onChange={formik.handleChange}\n                style={{ ...InputStyle }}\n              >\n                <MenuItem value='Client' selected>\n                  Client\n                </MenuItem>\n                <MenuItem value='Vendor'>Vendor</MenuItem>\n                <MenuItem value='admin'>Admin</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant='h6'>Financial Information</Typography>\n            <p></p>\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='fin_contact_name'\n              label='Financial Contact Name'\n              fullWidth\n              onChange={(e) => formik?.setFieldValue(\n                'fin_contact_name',\n                handleTextTranform(e?.target?.value)\n              )}\n              value={formik.values.fin_contact_name}\n              error={\n                formik.touched.fin_contact_name &&\n                Boolean(formik.errors.fin_contact_name)\n              }\n              helperText={\n                formik.touched.fin_contact_name &&\n                formik.errors.fin_contact_name\n              }\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='fin_email'\n              label='Financial Email'\n              fullWidth\n              onChange={formik.handleChange}\n              value={formik.values.fin_email}\n              error={\n                formik.touched.fin_email && Boolean(formik.errors.fin_email)\n              }\n              helperText={formik.touched.fin_email && formik.errors.fin_email}\n            />\n            <Field\n              as={TextField}\n              style={{ ...InputStyle }}\n              name='fin_phone'\n              label='Financial Phone'\n              fullWidth\n              onChange={formik.handleChange}\n              value={formik.values.fin_phone}\n              error={\n                formik.touched.fin_phone && Boolean(formik.errors.fin_phone)\n              }\n              helperText={formik.touched.fin_phone && formik.errors.fin_phone}\n            />\n            <FormControl fullWidth>\n              <InputLabel id='select-label'>Parent Client</InputLabel>\n              <Select\n                id='parent_client'\n                name='parent_client'\n                style={{ ...InputStyle }}\n                fontSize='sm'\n                fullWidth\n                label='Parent Client'\n                width='250px'\n                variant='outlined'\n                onChange={formik.handleChange}\n                value={formik.values.parent_client || ''}\n                error={\n                  formik.touched.parent_client &&\n                  Boolean(formik.errors.parent_client)\n                }\n              >\n                <MenuItem value=''>Select Parent</MenuItem>\n                {clients.map((option, i) => (\n                  <MenuItem value={option.id} key={i}>\n                    {option.client_name}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl fullWidth>\n              <InputLabel id='select-label'>Select Currency</InputLabel>\n              <Select\n                name='currency'\n                id='currency'\n                label='Select Currency'\n                labelId='currencyLabel'\n                className='selectfield'\n                value={formik.values.currency}\n                onChange={formik.handleChange}\n                style={{ ...InputStyle }}\n              >\n                <MenuItem value='INR'>INR</MenuItem>\n                <MenuItem value='USD'>USD</MenuItem>\n                <MenuItem value='GBP'>GBP</MenuItem>\n                <MenuItem value='AED'>AED</MenuItem>\n                <MenuItem value='EUR'>EUR</MenuItem>\n                <MenuItem value='SGD'>SGD</MenuItem>\n              </Select>\n            </FormControl>\n            <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    color='primary'\n                    defaultChecked={formik.values.active || true}\n                  />\n                }\n                label='Active'\n                name='active'\n                onChange={formik.handleChange}\n              />\n              {/* <div>\n                <Checkbox\n                  name='approveToClose'\n                  onChange={formik.handleChange}\n                  defaultChecked={formik.values.approveToClose}\n                />\n                Approval for close check\n              </div> */}\n            </Box>\n          </Grid>\n        </Grid>\n        <Grid\n          style={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            gap: '0.78rem',\n          }}\n        >\n          <Button\n            onClick={() => handleClose()}\n            color='primary'\n            variant='contained'\n          >\n            Cancel\n          </Button>\n          <Button type='submit' color='primary' variant='contained'>\n            Submit\n          </Button>\n        </Grid>\n      </form>\n    </FormikProvider>\n  );\n};\nexport default AddEditForm;\n","import { Box, Button, Card, CardContent, Checkbox, FormControlLabel, Grid, TextField } from \"@mui/material\";\nimport RequestsApi from \"api/requests\";\nimport { find, isEmpty } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { toastMessage } from \"views/Utils/Common\";\n\nfunction AddTermsToClient({ id, termsrows, handleClose }) {\n    const [siteTerms, setSiteTerms] = useState([]);\n    const [selectedTerms, setSelectedTerms] = useState([]);\n  \n    let response = [];\n    useEffect(() => {\n      try {\n        let userterms = '';\n  \n        if (Array.isArray(termsrows)) {\n          userterms = termsrows.find((row) => row.id === id);\n        }\n  \n        if (userterms) {\n          setSelectedTerms(userterms['terms']);\n        }\n  \n        response = RequestsApi.ListUserTerms('client');\n        response.then((resp) => {\n          let resData = JSON.parse(resp.data.data);\n          setSiteTerms(resData);\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }, []);\n  \n    useEffect(() => {\n      const clientData = find(termsrows, { id: id });\n      if (clientData?.terms) {\n        const clientTermsList = JSON?.parse(clientData?.terms);\n        setSelectedTerms(clientTermsList);\n      }\n    }, []);\n  \n    const handleCheckChange = (event, termsDetail) => {\n      if (event.target.checked) {\n        if (Array.isArray(selectedTerms)) {\n          let term = selectedTerms.filter((term) => term.id === termsDetail?.id);\n          if (term.length) {\n            term.term_value = event.target.checked;\n          } else {\n            setSelectedTerms((prev) => [\n              ...prev,\n              { ...termsDetail, term_value: event.target.checked },\n            ]);\n          }\n        } else {\n          if (selectedTerms && !isEmpty(selectedTerms)) {\n            setSelectedTerms((prev) => [\n              ...prev,\n              { ...termsDetail, term_value: event.target.checked },\n            ]);\n          } else {\n            setSelectedTerms([\n              { ...termsDetail, term_value: event.target.checked },\n            ]);\n          }\n        }\n      } else {\n        setSelectedTerms((prev) =>\n          prev.filter((term) => term.id !== termsDetail?.id)\n        );\n      }\n    };\n  \n    const handleChange = (event, term_name) => {\n      try {\n        if (event.target.value) {\n          if (Array.isArray(selectedTerms)) {\n            let term = selectedTerms.filter(\n              (term) => term.term_name === term_name\n            );\n            if (term.length) {\n              term.term_value = event.target.value;\n            } else {\n              setSelectedTerms((prev) => [\n                ...prev,\n                { term_name: term_name, term_value: event.target.value },\n              ]);\n            }\n          } else {\n            setSelectedTerms((prev) => [\n              ...prev,\n              { term_name: term_name, term_value: event.target.value },\n            ]);\n          }\n        } else {\n          setSelectedTerms((prev) =>\n            Array.isArray(prev)\n              ? prev.filter((term) => term.term_name !== term_name)\n              : prev\n          );\n        }\n      } catch (error) {\n        console.error('Error updating record :', error);\n      }\n    };\n  \n    const handleAddTermsToUser = () => {\n      let data = {\n        table_name: 'clients',\n        field_to_update: 'terms',\n        new_value: JSON.stringify(selectedTerms),\n        table_id: id,\n      };\n  \n      try {\n        let response = RequestsApi.UpdateData(data);\n        response?.then((res) => {\n          if (res.status === 200) {\n            toastMessage('Client terms updated successfully');\n            handleClose();\n          }\n        });\n      } catch (error) {\n        console.error('Error updating record :', error);\n      }\n    };\n  \n    function getUserTermValue(termId) {\n      try {\n        if (Array.isArray(selectedTerms)) {\n          let term = selectedTerms.find((t) => t.id == termId);\n          if (term) return term.term_value;\n          else return false;\n        } else {\n          return false;\n        }\n      } catch (error) {\n        console.error('Error updating record :', error);\n      }\n    }\n    return (\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '1rem',\n          width: '100%',\n          '& .actions': {\n            color: 'text.secondary',\n          },\n          '& .textPrimary': {\n            color: 'text.primary',\n            fontSize: '10px',\n          },\n          '& .MuiDataGrid-cellContent': {\n            color: 'text.primary',\n            fontSize: '10px',\n          },\n          '& .MuiDataGrid-columnHeaderTitle': {\n            color: 'text.primary',\n            fontSize: '10px',\n            fontWeight: 'bold',\n          },\n          '& .MuiDataGrid-columnHeaders': {\n            bgcolor: '#a8d6f8',\n          },\n        }}\n      >\n        <h2>Manage Client Terms</h2>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent style={{ background: '#fcfbfb' }}>\n              {siteTerms.map((term) => (\n                <Box\n                  key={term.id}\n                  display='flex'\n                  justifyContent='space-between'\n                  alignItems='center'\n                >\n                  {`${term.term_text} (${term.term_type}) - ${term.term_value}`}\n                  {term.term_type === 'boolean' ? (\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={getUserTermValue(term.id)}\n                          onChange={(event) => handleCheckChange(event, term)}\n                        />\n                      }\n                      label='Yes'\n                    />\n                  ) : (\n                    <TextField\n                      label='Term Value'\n                      name='term_value'\n                      defaultValue={\n                        getUserTermValue(term.term_name) || term.term_value\n                      }\n                      onChange={(event) => handleChange(event, term.term_name)}\n                      margin='normal'\n                    />\n                  )}\n                </Box>\n              ))}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid\n          style={{\n            display: 'flex',\n            justifyContent: 'flex-end',\n            gap: '0.78rem',\n          }}\n        >\n          <Button\n            onClick={() => handleClose()}\n            color='primary'\n            variant='contained'\n          >\n            Cancel\n          </Button>\n          <Button onClick={handleAddTermsToUser} variant='contained'>\n            Update Terms\n          </Button>\n        </Grid>\n      </Box>\n    );\n  }\n\n  export default AddTermsToClient;","import AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport ReceiptLongIcon from '@mui/icons-material/ReceiptLong';\r\nimport {\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Tooltip,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Modal from '@mui/material/Modal';\r\nimport Switch from '@mui/material/Switch';\r\nimport { DataGrid, GridActionsCellItem, GridToolbar } from '@mui/x-data-grid';\r\nimport RequestsApi from 'api/requests';\r\nimport { filter, includes } from 'lodash';\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport { clientRoles } from 'views/Utils/Common';\r\nimport '../Style.css';\r\nimport AcknowledgeForm from './AcknowledgeForm';\r\nimport AddEditForm from './AddEditForm';\r\nimport AddTermsToClient from './AddTermsToClient';\r\n\r\nexport default function ClientMaster() {\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = useState(false);\r\n  const [columns, setColumns] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [rows, setRows] = useState([]);\r\n  const [func, setFunc] = useState('client');\r\n  const [selectedId, setSelectedId] = useState(0);\r\n  const handleOpen = () => setOpen(true);\r\n  const theme = useTheme();\r\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const handleClose = () => {\r\n    setSelectedId(0);\r\n    setOpen(false);\r\n  };\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await RequestsApi.ListClients();\r\n      const resData = JSON?.parse(response.data.data);\r\n      setRows(resData);\r\n\r\n      const colData = Object.keys(resData[0])\r\n        .map((key) => {\r\n          if (key === 'active') {\r\n            return {\r\n              field: key,\r\n              flex: 1,\r\n              headerName: key.replaceAll('_', ' ').toUpperCase(),\r\n              renderCell: (params) => (\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch color='primary' defaultChecked={params.value} />\r\n                  }\r\n                  key={params.id}\r\n                  size='small'\r\n                  onChange={(event) => handleSwitchChange(event, params.id)}\r\n                />\r\n              ),\r\n            };\r\n          } else if (\r\n            ![\r\n              'id',\r\n              'fin_contact_name',\r\n              'fin_email',\r\n              'fin_phone',\r\n              'terms',\r\n              'candidateAuthForm',\r\n              'currency',\r\n            ].includes(key)\r\n          ) {\r\n            return {\r\n              field: key,\r\n              flex: 1,\r\n              headerName: key.replaceAll('_', ' ').toUpperCase(),\r\n              editable: true,\r\n            };\r\n          }\r\n          return null;\r\n        })\r\n        .filter(Boolean);\r\n\r\n      !includes(clientRoles, userDetail?.role) &&\r\n        colData.push({\r\n          field: 'actions',\r\n          type: 'actions',\r\n          headerName: 'ACTIONS',\r\n          width: 135,\r\n          cellClassName: 'actions',\r\n          getActions: (row) => [\r\n            <Tooltip title='Edit' arrow>\r\n              <GridActionsCellItem\r\n                color='inherit'\r\n                icon={<EditIcon color='primary'/>}\r\n                label='Edit'\r\n                className='textPrimary'\r\n                onClick={handleEditClick(row.id, 'client')}\r\n              />\r\n            </Tooltip>,\r\n            <Tooltip title='Billing Identifier' arrow>\r\n              <GridActionsCellItem\r\n                color='inherit'\r\n                icon={<ReceiptLongIcon color='primary'/>}\r\n                label='Acknowledge'\r\n                className='textPrimary'\r\n                onClick={() => navigate(`/billingList/${row.id}`)}\r\n              />\r\n            </Tooltip>,\r\n            // <Tooltip title='Manage Terms' arrow>\r\n            //   <GridActionsCellItem\r\n            //     color='inherit'\r\n            //     icon={\r\n            //       <SettingsApplicationsRoundedIcon\r\n            //         sx={{\r\n            //           color: '#bf1e2e',\r\n            //         }}\r\n            //       />\r\n            //     }\r\n            //     label='Manage Terms'\r\n            //     className='textPrimary'\r\n            //     onClick={handleEditClick(row.id, 'terms')}\r\n            //   />\r\n            // </Tooltip>,\r\n            // <Tooltip title='Acknowledge' arrow>\r\n            //   <GridActionsCellItem\r\n            //     color='inherit'\r\n            //     icon={<StickyNote2OutlinedIcon sx={{ color: '#bf1e2e' }} />}\r\n            //     label='Acknowledge'\r\n            //     className='textPrimary'\r\n            //     onClick={handleEditClick(row.id, 'acknowledge')}\r\n            //   />\r\n            // </Tooltip>,\r\n          ],\r\n        });\r\n\r\n      setColumns(colData);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSwitchChange = (event, id) => {\r\n    let upddata = {\r\n      table_name: 'clients',\r\n      field_to_update: 'active',\r\n      new_value: event.target.checked,\r\n      table_id: id,\r\n    };\r\n\r\n    try {\r\n      let response = RequestsApi.UpdateData(upddata);\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (id, mfunc) => () => {\r\n    setSelectedId(id);\r\n    setFunc(mfunc);\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        gap:0.5,\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: '#fff',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeader': {\r\n          bgcolor: '#2152a1',\r\n        },\r\n        '& .MuiDataGrid-row': {\r\n          '&:nth-of-type(even)': {\r\n            backgroundColor: '#DDE1E9',\r\n          },\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitleContainer': {\r\n          justifyContent: 'flex-start',\r\n        },\r\n        '& .MuiDataGrid-cell--textLeft': {\r\n          justifyContent: 'left !important',\r\n        },\r\n      }}\r\n    >\r\n      {!includes(clientRoles, userDetail?.role) && (\r\n        <table width='100%'>\r\n          <tbody>\r\n            <tr>\r\n              <td width='100%' align='left'>\r\n                <Button\r\n                  color='primary'\r\n                  startIcon={<AddIcon />}\r\n                  onClick={handleOpen}\r\n                  variant='contained'\r\n                  style={{ float: 'right' }}\r\n                >\r\n                  Add Client\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      {loading ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n          <CircularProgress color='inherit' size={20} />\r\n        </div>\r\n      ) : (\r\n        <DataGrid\r\n          rows={\r\n            includes(clientRoles, userDetail?.role)\r\n              ? filter(rows, (data) => data?.id === userDetail?.client_id)\r\n              : rows\r\n          }\r\n          rowHeight={38}\r\n          columns={columns}\r\n          disableRowSelectionOnClick\r\n          slots={{\r\n            toolbar: GridToolbar,\r\n          }}\r\n          getRowClassName={(params) =>\r\n            params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n          }\r\n        />\r\n      )}\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='modal-modal-title'\r\n        aria-describedby='modal-modal-description'\r\n      >\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            overflowY: 'auto',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            width: isSmallScreen\r\n              ? '90%'\r\n              : func === 'client'\r\n              ? '680px'\r\n              : theme?.breakpoints?.values?.sm,\r\n            maxWidth: '90%',\r\n            bgcolor: 'background.paper',\r\n            border: '2px solid #000',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            '& label': {\r\n              lineHeight: '2em !important',\r\n            },\r\n          }}\r\n        >\r\n          {func === 'client' && (\r\n            <AddEditForm\r\n              id={selectedId}\r\n              clients={rows}\r\n              handleClose={handleClose}\r\n              fetchData={fetchData}\r\n            />\r\n          )}\r\n\r\n          {func === 'terms' && (\r\n            <AddTermsToClient\r\n              id={selectedId}\r\n              termsrows={rows}\r\n              handleClose={handleClose}\r\n            />\r\n          )}\r\n          {func === 'acknowledge' && (\r\n            <AcknowledgeForm\r\n              id={selectedId}\r\n              handleClose={handleClose}\r\n              rows={rows}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["props","value","onChange","className","wrapperClass","placeholder","_jsx","classNames","children","ReactQuill","theme","modules","toolbar","container","size","color","list","align","clipboard","matchVisual","formats","_ref","id","handleClose","acknowledgeDetail","setAcknowledgeDetail","useState","uploadedFileData","textInputData","clientDetail","setClientDetail","useEffect","RequestsApi","then","resp","resData","JSON","parse","data","e","console","error","_clientData$candidate","clientData","find","containsFile","candidateAuthForm","startsWith","substring","trim","_jsxs","style","display","flexDirection","gap","paddingBottom","padding","border","width","borderRadius","cursor","type","accept","res","_res$data","status","filename","handleFileChange","onClick","document","getElementById","click","paddingLeft","paddingTop","CancelOutlinedIcon","sx","fontSize","Box","alignItems","textAlign","marginY","Divider","flexItem","flexGrow","Typography","variant","marginX","TextFormatter","val","justifyContent","Button","handleSubmitData","isEmpty","table_name","field_to_update","new_value","concat","table_id","toastMessage","toast","disabled","validationSchema","Yup","shape","client_name","required","contact_name","email","phone","fin_contact_name","fin_email","fin_phone","address","country","clients","fetchData","setError","clientRows","InputStyle","marginBottom","eRow","filter","row","formik","useFormik","initialValues","client_type","parent_client","active","approveToClose","onSubmit","values","alert","stringify","map","obj","response","success","msg","err","addClient","FormikProvider","handleSubmit","Grid","spacing","item","sm","Field","as","TextField","name","label","fullWidth","_e$target","setFieldValue","handleTextTranform","target","touched","Boolean","errors","helperText","_e$target2","handleChange","FormControl","InputLabel","Select","countryList","option","i","MenuItem","labelId","selected","xs","_e$target3","currency","FormControlLabel","control","Switch","defaultChecked","termsrows","siteTerms","setSiteTerms","selectedTerms","setSelectedTerms","getUserTermValue","termId","Array","isArray","term","t","term_value","userterms","terms","clientTermsList","fontWeight","bgcolor","Card","CardContent","background","term_text","term_type","Checkbox","checked","event","handleCheckChange","termsDetail","length","prev","defaultValue","term_name","margin","handleAddTermsToUser","ClientMaster","_localStorage","_theme$breakpoints","_theme$breakpoints$va","navigate","useNavigate","open","setOpen","columns","setColumns","loading","setLoading","rows","setRows","func","setFunc","selectedId","setSelectedId","useTheme","isSmallScreen","useMediaQuery","breakpoints","down","userDetail","localStorage","getItem","async","colData","Object","keys","key","field","flex","headerName","replaceAll","toUpperCase","renderCell","params","handleSwitchChange","includes","editable","clientRoles","role","push","cellClassName","getActions","Tooltip","title","arrow","GridActionsCellItem","icon","EditIcon","handleEditClick","ReceiptLongIcon","upddata","mfunc","backgroundColor","startIcon","AddIcon","handleOpen","float","CircularProgress","DataGrid","client_id","rowHeight","disableRowSelectionOnClick","slots","GridToolbar","getRowClassName","indexRelativeToCurrentPage","Modal","onClose","position","overflowY","top","left","transform","maxWidth","boxShadow","p","lineHeight","AddEditForm","AddTermsToClient","AcknowledgeForm"],"sourceRoot":""}