{"version":3,"file":"static/js/3.8e1d2c21.chunk.js","mappings":"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","sources":["views/MasterData/ChecksMaster/ClientChecksForm.jsx","views/MasterData/ChecksMaster/index.jsx"],"sourcesContent":["import {\r\n  Autocomplete,\r\n  Button,\r\n  Card,\r\n  Checkbox,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport RequestsApi from 'api/requests';\r\nimport ChecksList from 'component/Checks';\r\nimport DraggableItem from 'component/FormBuilder/DraggableItem';\r\nimport SidebarDroppable from 'component/FormBuilder/SidebarDroppable';\r\nimport { useFormik } from 'formik';\r\nimport { concat, includes, isEmpty, last, map } from 'lodash';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { Roles, clientRoles, toastMessage } from 'views/Utils/Common';\r\nimport * as yup from 'yup';\r\nimport '../Form.css';\r\nimport Modal from './Modal/Modal';\r\n\r\nconst initialModalOptions = {\r\n  open: false,\r\n  field: '',\r\n};\r\nconst iValues = {\r\n  client_id: '',\r\n  check_name: '',\r\n  cost: '',\r\n  category: '',\r\n};\r\n\r\nconst ClientChecksForm = () => {\r\n  const [open, setOpen] = useState(true);\r\n  const [modal, setModal] = useState(initialModalOptions);\r\n  const [allFields, setAllFields] = useState([]);\r\n  const [selectedCheck, setSelectedCheck] = useState({});\r\n  const [clientsList, setClientsList] = useState([]);\r\n  const [selectedClient, setSelectedClient] = useState(0);\r\n  const [packageList, setPackageList] = useState([]);\r\n  const [packageName, setPackageName] = useState('');\r\n  const [checks, setChecks] = useState([]);\r\n  const [checkId, setCheckId] = useState(0);\r\n  const [verificationList, setVerificationList] = useState([]);\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n  const userClients = localStorage.getItem('clients')\r\n    ? JSON.parse(localStorage.getItem('clients'))\r\n    : '';\r\n\r\n  const fetchData = () => {\r\n    try {\r\n      let response = RequestsApi.ListClients();\r\n      response.then((resp) => {\r\n        setClientsList(JSON.parse(resp.data.data));\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const allClients = userClients[0]?.allClient;\r\n    if (userClients) {\r\n      if (allClients || userDetail?.role === Roles?.ADMIN) {\r\n        fetchData();\r\n      } else {\r\n        setClientsList(userClients);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(selectedCheck) && !isEmpty(selectedCheck?.check_apis)) {\r\n      const verificationList = map(\r\n        JSON.parse(selectedCheck?.check_apis),\r\n        (data) => {\r\n          return {\r\n            label: data,\r\n            value: data,\r\n          };\r\n        }\r\n      );\r\n      setVerificationList(verificationList);\r\n    } else {\r\n      setVerificationList([]);\r\n    }\r\n  }, [selectedCheck]);\r\n\r\n  const getPackageByClientId = useCallback((clientId) => {\r\n    try {\r\n      let response = RequestsApi.ListPackagesByClient(clientId);\r\n      response.then((resp) => {\r\n        setPackageList(JSON.parse(resp.data.data));\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }, []);\r\n\r\n  const validationSchema = yup.object({\r\n    check_name: yup\r\n      .string('Enter check Name')\r\n      .required('check Name is required'),\r\n    category: yup.string('Enter category').required('category is required'),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      client_id: '',\r\n      check_name: '',\r\n      category: '',\r\n      check_fields: '',\r\n      active: 1,\r\n      isAddressVerify: false,\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      let checkfields = JSON.stringify(allFields);\r\n      values['check_fields'] = checkfields;\r\n      let response = RequestsApi.CreateCheck({\r\n        data: values,\r\n      });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('AllFields', JSON.stringify([...allFields]));\r\n  }, [allFields]);\r\n\r\n  const handleFormFieldFormat = (fieldName) => {\r\n    let fields = [];\r\n\r\n    switch (fieldName) {\r\n      case 'Name':\r\n        fields = [\r\n          { label: 'First Name', value: '', fieldName: 'Text Field' },\r\n          { label: 'Last Name', value: '', fieldName: 'Text Field' },\r\n        ];\r\n        break;\r\n      case 'Address':\r\n        fields = [\r\n          { label: 'Address Line 1', value: '', fieldName: 'Text Field' },\r\n          { label: 'Address Line 2', value: '', fieldName: 'Text Field' },\r\n          {\r\n            label: 'City',\r\n            value: '',\r\n            values: [''],\r\n            fieldName: 'Select',\r\n            options: ['Vadodara', 'Surat', 'Ahmedabad', 'Rajkot'],\r\n          },\r\n          {\r\n            label: 'State',\r\n            value: '',\r\n            values: [''],\r\n            fieldName: 'Select',\r\n            options: ['Gujarat', 'Rajasthan', 'Maharashtra', 'Kerala'],\r\n          },\r\n          { label: 'Area', value: '', fieldName: 'Text Field' },\r\n          { label: 'Zip Code', value: '', fieldName: 'Text Field' },\r\n        ];\r\n        break;\r\n      default:\r\n        fields = [\r\n          { label: 'First Name', value: '', fieldName: 'Text Field' },\r\n          { label: 'Last Name', value: '', fieldName: 'Text Field' },\r\n        ];\r\n        break;\r\n    }\r\n\r\n    setAllFields(concat(allFields, fields));\r\n  };\r\n\r\n  const updateDrag = (param) => {\r\n    const formFieldFormat = ['Name', 'Address'];\r\n\r\n    if (!includes(formFieldFormat, param?.draggableId)) {\r\n      if (\r\n        param?.source?.droppableId === param?.destination?.droppableId &&\r\n        param?.source?.droppableId === 'dropArea'\r\n      ) {\r\n        const sourceIndex = param?.source?.index;\r\n        const destIndex = param?.destination?.index;\r\n        const temp = [...allFields];\r\n        temp.splice(destIndex, 0, temp.splice(sourceIndex, 1)[0]);\r\n        if (sourceIndex !== destIndex) {\r\n          setAllFields([...temp]);\r\n        }\r\n      } else if (param?.destination?.droppableId === 'dropArea') {\r\n        setModal({\r\n          index: -1,\r\n          open: true,\r\n          field: param.draggableId,\r\n        });\r\n        setOpen(false);\r\n      }\r\n    } else {\r\n      handleFormFieldFormat(param?.draggableId);\r\n    }\r\n  };\r\n\r\n  const getCheckByPackage = useCallback(\r\n    (selectedPackage) => {\r\n      try {\r\n        let response = RequestsApi.ListChecksByClientPackage(\r\n          selectedClient,\r\n          selectedPackage\r\n        );\r\n        response.then((resp) => {\r\n          let checks = JSON.parse(resp.data.data);\r\n          setChecks(checks);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    },\r\n    [selectedClient]\r\n  );\r\n\r\n  const handleClientChange = (event) => {\r\n    setSelectedClient(event.target.value);\r\n    getPackageByClientId(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (includes(clientRoles, userDetail?.role) && !isEmpty(clientsList)) {\r\n      setSelectedClient(userDetail?.client_id);\r\n      getPackageByClientId(userDetail?.client_id);\r\n    }\r\n  }, [clientsList, userDetail?.role, userDetail?.client_id]);\r\n\r\n  const handleChangePackage = (event) => {\r\n    setPackageName(event?.target?.value);\r\n    getCheckByPackage(event?.target?.value);\r\n  };\r\n\r\n  const updateForm = () => {\r\n    if (selectedCheck?.id) {\r\n      let upddata = {\r\n        data: {\r\n          check_fields: JSON.stringify(allFields),\r\n          check_apis: JSON.stringify(map(verificationList, 'value')),\r\n          check_id: selectedCheck?.id,\r\n          check_name: selectedCheck?.check_name,\r\n          package_name: packageName,\r\n        },\r\n        id: selectedCheck?.id,\r\n      };\r\n      try {\r\n        let response = RequestsApi?.EditClientChecks(upddata);\r\n        response?.then((res) => {\r\n          if (res?.status === 200) {\r\n            toastMessage('Form submitted successfully');\r\n            setAllFields([]);\r\n            setVerificationList([]);\r\n            setSelectedClient(0);\r\n            setPackageName('');\r\n            setChecks([]);\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      toastMessage('Please Select the check First.', 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={(param) => updateDrag(param)}>\r\n        <Card sx={{ display: 'flex', p: 4 }}>\r\n          <SidebarDroppable />\r\n\r\n          <Droppable droppableId={'dropArea'} key={'dropArea'}>\r\n            {(provided) => (\r\n              <>\r\n                <Box\r\n                  component='main'\r\n                  sx={{\r\n                    flexGrow: 1,\r\n                    // bgcolor: 'background.default',\r\n                    p: 3,\r\n                  }}\r\n                >\r\n                  <div\r\n                    {...provided.droppableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    style={{ minHeight: '100vh', backgroundColor: '#fff' }}\r\n                  >\r\n                    {!isEmpty(allFields)\r\n                      ? allFields?.map((field, i) => {\r\n                          return (\r\n                            <DraggableItem\r\n                              field={field}\r\n                              setAllFields={setAllFields}\r\n                              setModal={setModal}\r\n                              i={i}\r\n                              key={Math.random()}\r\n                            />\r\n                          );\r\n                        })\r\n                      : 'Drag Here'}\r\n                  </div>\r\n                </Box>\r\n                {provided.placeholder}\r\n              </>\r\n            )}\r\n          </Droppable>\r\n\r\n          <Grid\r\n            container\r\n            direction='column'\r\n            width='200px'\r\n            style={{ backgroundColor: '#B7C0D0', padding: '5px' }}\r\n          >\r\n            <form onSubmit={formik.handleSubmit}>\r\n              <div id='clientLabel' style={{ paddingTop: '0.3rem' }}>\r\n                Select Client\r\n              </div>\r\n              <Select\r\n                name='client_id'\r\n                id='client_id'\r\n                label='Select Client'\r\n                labelId='clientLabel'\r\n                className='selectfield'\r\n                value={selectedClient}\r\n                sx={{\r\n                  '&.MuiInputBase-root, .MuiOutlinedInput-input': {\r\n                    padding: '3px !important',\r\n                  },\r\n                }}\r\n                disabled={includes(clientRoles, userDetail?.role)}\r\n                style={{ width: '90%' }}\r\n                onChange={handleClientChange}\r\n                onBlur={formik.handleBlur}\r\n              >\r\n                {clientsList.map((option, i) => (\r\n                  <MenuItem value={option.id} key={Math.random()}>\r\n                    {option.client_name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <InputLabel id='clientLabel'>Select Package</InputLabel>\r\n              <Select\r\n                name='package_id'\r\n                id='package_id'\r\n                label='Select Package'\r\n                labelId='packageLable'\r\n                className='selectfield'\r\n                style={{ width: '90%' }}\r\n                sx={{\r\n                  '&.MuiInputBase-root, .MuiOutlinedInput-input': {\r\n                    padding: '3px !important',\r\n                  },\r\n                }}\r\n                value={packageName}\r\n                onChange={handleChangePackage}\r\n                onBlur={formik.handleBlur}\r\n              >\r\n                {!isEmpty(packageList) ? (\r\n                  packageList.map((option, i) => (\r\n                    <MenuItem value={option?.package_name} key={Math.random()}>\r\n                      {option?.package_name}\r\n                    </MenuItem>\r\n                  ))\r\n                ) : (\r\n                  <MenuItem key={Math.random()}>No Packages</MenuItem>\r\n                )}\r\n              </Select>\r\n              <div id='categoryLabel' style={{ paddingTop: '0.3rem' }}>\r\n                Select Verification List\r\n              </div>\r\n              <Autocomplete\r\n                multiple\r\n                disabled={isEmpty(packageName) || isEmpty(selectedCheck)}\r\n                style={{ width: '90%' }}\r\n                sx={{\r\n                  padding: '0 !important',\r\n                  backgroundColor: '#fff',\r\n                  margin: '5px 5px',\r\n                  width: '163px',\r\n                  '&.MuiInputBase-root, .MuiOutlinedInput-input': {\r\n                    padding: '3px !important',\r\n                  },\r\n                  '& .MuiOutlinedInput-root': {\r\n                    paddingRight: '52px !important',\r\n                    padding: '6px !important',\r\n                  },\r\n                }}\r\n                id='verification'\r\n                options={[\r\n                  { label: 'Addhar Card', value: 'Addhar Card' },\r\n                  { label: 'Pan Card', value: 'Pan Card' },\r\n                  { label: 'Passport', value: 'Passport' },\r\n                  { label: 'Voter Id', value: 'Voter Id' },\r\n                  { label: 'Driving License', value: 'Driving License' },\r\n                ]}\r\n                getOptionLabel={(option) => option.label}\r\n                value={verificationList}\r\n                onChange={(event, newValue) => {\r\n                  if (\r\n                    !includes(\r\n                      map(verificationList, 'value'),\r\n                      last(newValue)?.value\r\n                    )\r\n                  )\r\n                    setVerificationList(newValue);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} variant='outlined' />\r\n                )}\r\n              />\r\n            </form>\r\n            <Button\r\n              variant='contained'\r\n              name='Submit'\r\n              className='button'\r\n              type='submit'\r\n              onClick={updateForm}\r\n              disabled={isEmpty(selectedCheck)}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            direction='column'\r\n            width='200px'\r\n            style={{ backgroundColor: '#fff', padding: '0 5px 5px 5px' }}\r\n          >\r\n            <ChecksList\r\n              client={selectedClient}\r\n              selectedCheck={selectedCheck}\r\n              setSelectedCheck={setSelectedCheck}\r\n              key={Math.random()}\r\n              setAllFields={setAllFields}\r\n              checks={checks}\r\n              setCheckId={setCheckId}\r\n            />\r\n          </Grid>\r\n        </Card>\r\n        {modal?.open && (\r\n          <Modal\r\n            modal={modal}\r\n            setModal={setModal}\r\n            setAllFields={setAllFields}\r\n            allFields={allFields}\r\n          />\r\n        )}\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\nexport default ClientChecksForm;\r\n","import { useEffect, useState } from 'react';\r\nimport ChecksForm from './ChecksForm';\r\nimport ClientChecksForm from './ClientChecksForm';\r\nimport '../Style.css';\r\nimport { Card } from '@mui/material';\r\n\r\nconst ChecksMaster = () => {\r\n  const pathname = window.location.pathname;\r\n\r\n  return (\r\n    <>\r\n      {pathname === '/master/checks' ? <ChecksForm /> : <ClientChecksForm />}\r\n    </>\r\n  );\r\n};\r\nexport default ChecksMaster;\r\n"],"names":["initialModalOptions","open","field","ClientChecksForm","_localStorage","setOpen","useState","modal","setModal","allFields","setAllFields","selectedCheck","setSelectedCheck","clientsList","setClientsList","selectedClient","setSelectedClient","packageList","setPackageList","packageName","setPackageName","checks","setChecks","checkId","setCheckId","verificationList","setVerificationList","userDetail","JSON","parse","localStorage","getItem","userClients","useEffect","_userClients$","allClients","allClient","role","Roles","fetchData","RequestsApi","then","resp","data","error","console","isEmpty","check_apis","map","label","value","getPackageByClientId","useCallback","clientId","validationSchema","yup","check_name","required","category","formik","useFormik","initialValues","client_id","check_fields","active","isAddressVerify","onSubmit","values","checkfields","stringify","setItem","updateDrag","param","_param$source","_param$destination","_param$source2","_param$destination3","includes","draggableId","fieldName","fields","options","concat","handleFormFieldFormat","source","droppableId","destination","_param$source3","_param$destination2","sourceIndex","index","destIndex","temp","splice","getCheckByPackage","selectedPackage","clientRoles","_jsx","_Fragment","children","_jsxs","DragDropContext","onDragEnd","Card","sx","display","p","SidebarDroppable","Droppable","provided","Box","component","flexGrow","droppableProps","dragHandleProps","ref","innerRef","style","minHeight","backgroundColor","i","DraggableItem","Math","random","placeholder","Grid","container","direction","width","padding","handleSubmit","id","paddingTop","Select","name","labelId","className","disabled","onChange","event","target","onBlur","handleBlur","option","MenuItem","client_name","InputLabel","_event$target","_event$target2","package_name","Autocomplete","multiple","margin","paddingRight","getOptionLabel","newValue","_last","last","renderInput","params","TextField","variant","Button","type","onClick","updateForm","upddata","check_id","response","res","status","toastMessage","ChecksList","client","Modal","ChecksMaster","pathname","window","location","ChecksForm"],"sourceRoot":""}