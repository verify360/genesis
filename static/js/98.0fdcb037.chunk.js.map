{"version":3,"file":"static/js/98.0fdcb037.chunk.js","mappings":"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","sources":["views/Dashboard/ApexChart.js","views/Dashboard/GaugeChart.js","views/Dashboard/index.js"],"sourcesContent":["// import {\n//   Card,\n//   CardContent,\n//   CardHeader,\n//   Divider,\n//   Typography,\n// } from '@mui/material';\n// import { groupBy, head, map, mapKeys, omit, reduce } from 'lodash';\n// import React, { useState } from 'react';\n// import ReactApexChart from 'react-apexcharts';\n\n// const ApexChart = ({ chartDetail }) => {\n//   const groupedData = omit(\n//     mapKeys(groupBy(chartDetail, 0), (_, key) => head(key.split(' '))),\n//     'null'\n//   );\n\n//   const combinedArray = map(groupedData, (group, name) => {\n//     const counts = reduce(\n//       group,\n//       (acc, [, status, count]) => {\n//         if (status === 'CLOSED') {\n//           acc.closedCount = (acc.closedCount || 0) + count;\n//         } else if (status === 'PENDING') {\n//           acc.pendingCount = (acc.pendingCount || 0) + count;\n//         } else if (status === 'INIATED') {\n//           acc.initiatedCount = (acc.pendingCount || 0) + count;\n//         }\n//         return acc;\n//       },\n//       {}\n//     );\n\n//     return {\n//       name,\n//       closedCount: counts.closedCount !== undefined ? counts.closedCount : null,\n//       initiatedCount:\n//         counts.initiatedCount !== undefined ? counts.initiatedCount : null,\n//     };\n//   });\n\n//   const chartData = {\n//     series: [\n//       {\n//         name: 'Initiated',\n//         data: map(combinedArray, 'initiatedCount'),\n//       },\n//       {\n//         name: 'Closed',\n//         data: map(combinedArray, 'closedCount'),\n//       },\n//     ],\n//     options: {\n//       chart: {\n//         type: 'bar',\n//         // height: 250,\n//       },\n//       plotOptions: {\n//         bar: {\n//           horizontal: true,\n//           dataLabels: {\n//             position: 'top',\n//           },\n//         },\n//       },\n//       dataLabels: {\n//         enabled: true,\n//         offsetX: -6,\n//         style: {\n//           fontSize: '12px',\n//           colors: ['#fff'],\n//         },\n//       },\n//       colors: ['#1484CD', '#00ac69'],\n//       stroke: {\n//         show: true,\n//         width: 1,\n//         colors: ['#fff'],\n//       },\n//       tooltip: {\n//         shared: true,\n//         intersect: false,\n//       },\n//       xaxis: {\n//         categories: map(combinedArray, 'name'),\n//       },\n//       yaxis: {\n//         labels: {\n//           style: {\n//             fontSize: '12px',\n//           },\n//         },\n//       },\n//     },\n//   };\n\n//   return (\n//     <Card\n//       id='chart'\n//       sx={{\n//         height: '90%',\n//         overflow: 'scroll',\n//         overflowX: 'hidden',\n//         overflowY: 'auto',\n//       }}\n//     >\n//       <CardHeader\n//         title={\n//           <Typography component='div' className='card-header'>\n//             Assignee Count\n//           </Typography>\n//         }\n//       />\n//       <Divider />\n//       <CardContent>\n//         <ReactApexChart\n//           options={chartData.options}\n//           series={chartData.series}\n//           type='bar'\n//           // height={300}\n//         />\n//       </CardContent>\n//     </Card>\n//   );\n// };\n\n// export default ApexChart;\n\nimport {\n  filter,\n  groupBy,\n  head,\n  includes,\n  map,\n  mapKeys,\n  omit,\n  reduce,\n} from 'lodash';\nimport React from 'react';\nimport Chart from 'react-apexcharts';\nimport { checkStatus } from 'views/Utils/Common';\n\nconst processData = (data) => {\n  const groupedData = omit(\n    mapKeys(groupBy(data, 0), (_, key) => head(key?.split(' '))),\n    'null'\n  );\n\n  const combinedArray = map(groupedData, (group, name) => {\n    const counts = reduce(\n      group,\n      (acc, [, status, , count]) => {\n        if (\n          includes(\n            map(filter(checkStatus, { type: 'closed' }), 'label'),\n            status\n          )\n        ) {\n          acc.closedCount = (acc.closedCount || 0) + count;\n        } else if (status === 'PENDING') {\n          acc.pendingCount = (acc.pendingCount || 0) + count;\n        } else if (status === 'INITIATED') {\n          acc.initiatedCount = (acc.initiatedCount || 0) + count;\n        }\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      name,\n      closedCount: counts.closedCount !== undefined ? counts.closedCount : 0,\n      initiatedCount:\n        counts.initiatedCount !== undefined ? counts.initiatedCount : 0,\n    };\n  });\n\n  const categories = map(combinedArray, 'name');\n  const initiatedData = map(combinedArray, 'initiatedCount');\n  const closedData = map(combinedArray, 'closedCount');\n\n  return { categories, initiatedData, closedData };\n};\n\nconst ApexChart = ({ data }) => {\n  const { categories, initiatedData, closedData } = processData(data);\n\n  const state = {\n    options: {\n      chart: {\n        id: 'basic-bar',\n        toolbar: {\n          show: false, // Hide toolbar\n        },\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false, // Vertical bars\n          barHeight: '100%', // Adjust bar height\n          dataLabels: {\n            enabled: false, // Hide data labels if not needed\n          },\n        },\n      },\n      colors: ['#5A6C9B', '#2152a1'],\n      xaxis: {\n        categories: categories,\n        labels: {\n          show: true,\n        },\n        axisBorder: {\n          show: false, // Hide x-axis border lines\n        },\n      },\n      yaxis: {\n        show: false, // Hide y-axis labels\n        axisBorder: {\n          show: false, // Hide y-axis border lines\n        },\n        axisTicks: {\n          show: false, // Hide y-axis ticks\n        },\n      },\n      grid: {\n        show: false, // Hide grid lines\n      },\n      legend: {\n        show: false, // Hide legend\n      },\n    },\n    series: [\n      {\n        name: 'INITIATED',\n        data: initiatedData, // Blue bars data\n      },\n      {\n        name: 'CLOSED',\n        data: closedData, // Green bars data\n      },\n    ],\n  };\n\n  return (\n    <div className='app'>\n      <div className='row'>\n        <div className='mixed-chart'>\n          <Chart\n            options={state.options}\n            series={state.series}\n            type='bar'\n            width='500'\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ApexChart;\n","import { Box } from '@mui/material';\nimport { head, map } from 'lodash';\nimport React from 'react';\nimport GaugeChart from 'react-gauge-chart';\n\nconst SpeedometerChart = ({ label, value }) => {\n  // Colors for each arc\n  const arcColors = [\n    '#5A6D9C', // Lighter shade 1\n    '#4D6290', // Lighter shade 2\n    '#415784', // Lighter shade 3\n    '#344B78', // Darker shade 1\n    '#273F6C', // Darker shade 2\n    '#1A3260', // Darker shade 3\n  ];\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <GaugeChart\n        arcWidth={0.4}\n        id='gauge-chart1'\n        nrOfLevels={500}\n        needleBaseColor='#000'\n        arcsLength={value}\n        colors={arcColors}\n        cornerRadius={0}\n        percent={70 / 100}\n        arcPadding={0}\n        hideText\n      />\n      <Box\n        sx={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 0.8,\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        {map(label, (data, index) => {\n          return (\n            <Box\n              key={index}\n              sx={{\n                display: 'flex',\n                gap: 1,\n                flexBasis: 'calc(25% - 16px)', // Adjust width to ensure 4 items per row\n                alignItems: 'center',\n              }}\n            >\n              <span\n                style={{\n                  backgroundColor: arcColors[index],\n                  width: '10px',\n                  height: '10px',\n                  borderRadius: '50%',\n                  display: 'inline-block',\n                }}\n              />\n              <span style={{ color: arcColors[index] }}>\n                {head(data?.split(' '))}\n              </span>\n            </Box>\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\nexport default SpeedometerChart;\n","import { useCallback, useEffect, useState } from 'react';\r\n// material-ui\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CircularProgress,\r\n  Divider,\r\n  Grid,\r\n  LinearProgress,\r\n  Menu,\r\n  Select,\r\n  Typography,\r\n} from '@mui/material';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n//project import\r\nimport SalesLineCard from './SalesLineCard';\r\nimport SalesLineCardData from './chart/sale-chart-1';\r\n\r\nimport value from 'assets/scss/_themes-vars.scss';\r\nimport { gridSpacing } from 'config';\r\nimport ReportCard from './ReportCard';\r\nimport RevenuChartCard from './RevenuChartCard';\r\n\r\n// assets\r\nimport ThumbUpAltTwoTone from '@mui/icons-material/ThumbUpAltTwoTone';\r\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport RequestsApi from 'api/requests';\r\nimport {\r\n  compact,\r\n  filter,\r\n  find,\r\n  includes,\r\n  isEmpty,\r\n  map,\r\n  merge,\r\n  omit,\r\n  pick,\r\n  round,\r\n  startCase,\r\n  sumBy,\r\n  zipObject,\r\n} from 'lodash';\r\nimport moment from 'moment';\r\nimport { Roles, clientRoles } from 'views/Utils/Common';\r\nimport ApexChart from './ApexChart';\r\nimport { FaUserTie } from 'react-icons/fa6';\r\nimport { PiDotsThreeVerticalBold } from 'react-icons/pi';\r\nimport GaugeChart from './GaugeChart';\r\nimport { FaUserCircle } from 'react-icons/fa';\r\nimport { AiOutlineEllipsis } from 'react-icons/ai';\r\nimport { PiDotsThreeOutlineFill } from 'react-icons/pi';\r\nimport User3 from 'assets/images/users/avatar-3.jpg';\r\nimport RevenuChart from './chart/revenu-chart';\r\nimport { MenuItem } from '@mui/material';\r\n\r\n// custom style\r\nconst FlatCardBlock = styled((props) => (\r\n  <Grid item sm={6} xs={12} {...props} />\r\n))(({ theme }) => ({\r\n  padding: '25px 25px',\r\n  borderLeft: '1px solid' + theme.palette.background.default,\r\n  [theme.breakpoints.down('sm')]: {\r\n    borderLeft: 'none',\r\n    borderBottom: '1px solid' + theme.palette.background.default,\r\n  },\r\n  [theme.breakpoints.down('md')]: {\r\n    borderBottom: '1px solid' + theme.palette.background.default,\r\n  },\r\n}));\r\n\r\n// ==============================|| DASHBOARD DEFAULT ||============================== //\r\n\r\nconst Default = () => {\r\n  const theme = useTheme();\r\n  const [dashboardCount, setDashboardCount] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [selectedClient, setSelectedClient] = useState(null);\r\n  const userDetail = localStorage?.getItem('user')\r\n    ? JSON.parse(localStorage?.getItem('user'))\r\n    : {};\r\n\r\n  const userClients = localStorage.getItem('clients')\r\n    ? JSON.parse(localStorage.getItem('clients'))\r\n    : '';\r\n\r\n  const getDashboardCount = useCallback(async (clientId) => {\r\n    const data = {\r\n      from: moment().clone().subtract(30, 'days').format('YYYY-MM-DD'),\r\n      to: moment().format('YYYY-MM-DD'),\r\n      role: userDetail?.role,\r\n      clientId: clientId || find(userClients, 'id')?.id,\r\n      userId: userDetail?._id,\r\n    };\r\n    try {\r\n      setLoading(true);\r\n      const response = await RequestsApi.getDashboardCount(data);\r\n      const dashboardData = response?.data?.data;\r\n      const totalOrders =\r\n        dashboardData.openOrderCount + dashboardData.closedOrderCount;\r\n      const totalChecks =\r\n        dashboardData.openChecksCount + dashboardData.closedChecksCount;\r\n      const reorderedData = {\r\n        totalOrders,\r\n        openOrders: dashboardData.openOrderCount,\r\n        closedOrders: dashboardData.closedOrderCount,\r\n        totalChecks,\r\n        openChecks: dashboardData.openChecksCount,\r\n        closedChecks: dashboardData.closedChecksCount,\r\n        checksAssignedTo: dashboardData.checksAssignedTo,\r\n        assignedToByStatus: dashboardData.assignedToByStatus,\r\n        checksByClients: dashboardData.checksByClients,\r\n      };\r\n      setDashboardCount([reorderedData]);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getDashboardCount();\r\n  }, []);\r\n\r\n  const ObjectKeys =\r\n    !isEmpty(dashboardCount) && dashboardCount[0]\r\n      ? Object?.keys(dashboardCount[0]).filter(\r\n          (data) =>\r\n            data !== 'checksAssignedTo' &&\r\n            data !== 'checksByClients' &&\r\n            data !== 'assignedToByStatus'\r\n        )\r\n      : [];\r\n\r\n  const themeColor = [\r\n    theme.palette.primary.light,\r\n    theme.palette.warning.main,\r\n    theme.palette.success.main,\r\n    theme.palette.primary.light,\r\n    theme.palette.warning.main,\r\n    theme.palette.success.main,\r\n  ];\r\n\r\n  const clientThemeColor = [\r\n    theme.palette.warning.main,\r\n    theme.palette.primary.light,\r\n    theme.palette.success.main,\r\n    theme.palette.warning.main,\r\n    theme.palette.primary.light,\r\n    theme.palette.success.main,\r\n  ];\r\n\r\n  const revenueChartList = dashboardCount[0]?.checksAssignedTo?.replace(\r\n    /\\\\/g,\r\n    ''\r\n  )\r\n    ? JSON?.parse(\r\n        dashboardCount[0]?.checksAssignedTo?.replace(/\\\\/g, '')\r\n      )?.filter((item) => item[0] !== null)\r\n    : [];\r\n\r\n  const revenueChartLabel = revenueChartList?.map((data) => data[0]);\r\n  const revenueChartValue = revenueChartList?.map((data) => data[1]);\r\n\r\n  const linChartData = dashboardCount[0]?.checksByClients?.replace(/\\\\/g, '')\r\n    ? map(\r\n        compact(\r\n          JSON?.parse(dashboardCount[0]?.checksByClients?.replace(/\\\\/g, ''))\r\n        ),\r\n        (innerArray) => zipObject(['name', 'count'], innerArray)\r\n      )\r\n    : [];\r\n\r\n  const RevenueData = {\r\n    height: 228,\r\n    type: 'donut',\r\n    options: {\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      labels: revenueChartLabel,\r\n      legend: {\r\n        show: true,\r\n        position: 'bottom',\r\n        fontFamily: 'inherit',\r\n        labels: {\r\n          colors: 'inherit',\r\n        },\r\n      },\r\n      itemMargin: {\r\n        horizontal: 10,\r\n        vertical: 10,\r\n      },\r\n      colors: [value?.error, value?.primary, value?.info],\r\n    },\r\n    series: revenueChartValue,\r\n  };\r\n\r\n  const data = [\r\n    { percentage: '50', description: 'Description 1' },\r\n    { percentage: '50', description: 'Description 2' },\r\n    { percentage: '50', description: 'Description 3' },\r\n    { percentage: '50', description: 'Description 4' },\r\n  ];\r\n\r\n  const recentData = [\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n    {\r\n      username: 'Dhruv Patel',\r\n      status: 'Lorem',\r\n      date: moment().format('DD-MM-YYYY'),\r\n      status: 'Lorem',\r\n    },\r\n  ];\r\n\r\n  const handleClientChange = (event) => {\r\n    const clientId = event.target.value;\r\n    setSelectedClient(clientId);\r\n    getDashboardCount(clientId);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n          <CircularProgress color='inherit' size={20} />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* Dropdown for clients */}\r\n          {includes(clientRoles, userDetail?.role) && (\r\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', pb: 1 }}>\r\n              <Select\r\n                value={selectedClient || find(userClients, 'id')?.id}\r\n                onChange={handleClientChange}\r\n                variant='outlined'\r\n                sx={{\r\n                  minWidth: 120,\r\n                  backgroundColor: '#2152a1',\r\n                  p: '3.5px 15px',\r\n                  '& .MuiOutlinedInput-input': {\r\n                    p: '8.5px 14px !important',\r\n                    color: '#FFF',\r\n                  },\r\n                  '& .MuiSelect-icon': {\r\n                    color: 'white',\r\n                  },\r\n                }}\r\n              >\r\n                {userClients &&\r\n                  !isEmpty(userClients) &&\r\n                  filter(userClients, (client) => client?.id !== 1).map(\r\n                    (option, i) => (\r\n                      <MenuItem value={option?.id} key={i}>\r\n                        {option?.client_name}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n              </Select>\r\n            </Box>\r\n          )}\r\n\r\n          <Grid container spacing={2}>\r\n            {/* Data cards */}\r\n            {ObjectKeys?.map((item, index) => (\r\n              <Grid item xs={12} sm={4} md={2} key={index}>\r\n                <Card>\r\n                  <CardContent>\r\n                    <Grid container direction='column' spacing={1}>\r\n                      <Grid item container justifyContent='space-between'>\r\n                        <FaUserTie fill='#1e4f9e' size={20} />\r\n                        <PiDotsThreeVerticalBold fill='grey' size={20} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography\r\n                          variant='h3'\r\n                          sx={{\r\n                            color: '#1e4f9e',\r\n                            fontSize: '1.6rem',\r\n                            fontWeight: 500,\r\n                          }}\r\n                        >\r\n                          {dashboardCount?.[0]?.[item]}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography sx={{ color: 'grey' }}>\r\n                          {startCase(Object.keys(dashboardCount[0])[index])}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Box width='100%'>\r\n                          <LinearProgress\r\n                            variant='determinate'\r\n                            value={dashboardCount?.[0]?.[item]}\r\n                            sx={{ height: 9, borderRadius: 5 }}\r\n                          />\r\n                        </Box>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n\r\n            {/* Additional Grid Item */}\r\n            <Grid item xs={12} sm={12} md={4} spacing={1}>\r\n              <Card sx={{ height: '100%' }}>\r\n                <CardContent>\r\n                  <Typography\r\n                    variant='h2'\r\n                    className='card-header'\r\n                    style={{ fontSize: '0.9rem', marginBottom: 22 }}\r\n                  >\r\n                    Traffic Sources\r\n                  </Typography>\r\n                  <Grid\r\n                    container\r\n                    spacing={gridSpacing}\r\n                    sx={{ overflow: 'scroll', maxHeight: '21rem' }}\r\n                  >\r\n                    {map(linChartData, (data) => {\r\n                      return (\r\n                        <Grid item xs={12}>\r\n                          <Grid container alignItems='center' spacing={1}>\r\n                            <Grid item sm zeroMinWidth>\r\n                              <Typography variant='body2'>\r\n                                {data?.name}\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                              <Typography variant='body2' align='right'>\r\n                                {round(\r\n                                  (data?.count / sumBy(linChartData, 'count')) *\r\n                                    100,\r\n                                  1\r\n                                )}\r\n                                %\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                              <LinearProgress\r\n                                variant='determinate'\r\n                                aria-label='direct'\r\n                                value={data?.count}\r\n                                color='primary'\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            {/* Revenue chart */}\r\n            <Grid item xs={12} sm={12} md={8}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Grid\r\n                    container\r\n                    spacing={2}\r\n                    sx={{ display: 'flex', alignItems: 'center' }}\r\n                  >\r\n                    <Grid item xs={12} md={7}>\r\n                      <Typography\r\n                        variant='h2'\r\n                        className='card-header'\r\n                        style={{ fontSize: '0.9rem' }}\r\n                      >\r\n                        Assignee Count\r\n                      </Typography>\r\n                      <ApexChart\r\n                        data={\r\n                          dashboardCount[0]?.assignedToByStatus\r\n                            ? JSON?.parse(dashboardCount[0]?.assignedToByStatus)\r\n                            : []\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={5}>\r\n                      <GaugeChart\r\n                        label={revenueChartLabel}\r\n                        value={revenueChartValue}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            {/* <Grid\r\n           item\r\n           xs={12}\r\n           sm={12}\r\n           sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\r\n         >\r\n           {map(recentData, (data, index) => {\r\n             return (\r\n               <Card key={index}>\r\n                 <CardContent>\r\n                   <Box\r\n                     sx={{\r\n                       display: 'flex',\r\n                       justifyContent: 'space-between',\r\n                       alignItems: 'center',\r\n                     }}\r\n                   >\r\n                     <Box\r\n                       sx={{ display: 'flex', gap: 2, alignItems: 'center' }}\r\n                     >\r\n                       <img\r\n                         src={User3}\r\n                         alt='User'\r\n                         style={{\r\n                           width: '30px',\r\n                           height: '30px',\r\n                           borderRadius: '50%',\r\n                         }}\r\n                       />\r\n                       <Typography>{data?.username}</Typography>\r\n                     </Box>\r\n                     <Box>\r\n                       <Typography>{data?.status}</Typography>\r\n                     </Box>\r\n                     <Box>\r\n                       <Typography>{data?.date}</Typography>\r\n                     </Box>\r\n                     <Box>\r\n                       <Typography>{data?.name}</Typography>\r\n                     </Box>\r\n                     <Box>\r\n                       <Typography>{data?.status}</Typography>\r\n                     </Box>\r\n                     <Box>\r\n                       <PiDotsThreeOutlineFill />\r\n                     </Box>\r\n                   </Box>\r\n                 </CardContent>\r\n               </Card>\r\n             );\r\n           })}\r\n         </Grid> */}\r\n          </Grid>\r\n        </>\r\n\r\n        // <Grid container spacing={gridSpacing}>\r\n        //   <Grid item xs={12}>\r\n        //     <Grid container spacing={gridSpacing}>\r\n        //       {map(ObjectKeys, (item, index) => {\r\n        //         return (\r\n        //           <Grid item lg={4} sm={6} xs={12}>\r\n        //             <ReportCard\r\n        //               primary={dashboardCount[0]?.[item]}\r\n        //               color={\r\n        //                 includes(clientRoles, userDetail?.role)\r\n        //                   ? clientThemeColor[index]\r\n        //                   : themeColor[index]\r\n        //               }\r\n        //               footerData={startCase(\r\n        //                 Object.keys(dashboardCount[0])[index]\r\n        //               )}\r\n        //               iconPrimary={ThumbUpAltTwoTone}\r\n        //               iconFooter={TrendingUpIcon}\r\n        //             />\r\n        //           </Grid>\r\n        //         );\r\n        //       })}\r\n        //     </Grid>\r\n        //   </Grid>\r\n        //   <Grid item xs={12}>\r\n        //     <Grid container spacing={gridSpacing}>\r\n        //       {userDetail?.role !== Roles?.STAFF &&\r\n        //         userDetail?.role !== Roles?.VENDOR && (\r\n        //           <Grid item lg={8} xs={12}>\r\n        //             <Grid container spacing={gridSpacing}>\r\n        //               <Grid item xs={12} sm={6}>\r\n        //                 <ApexChart\r\n        //                   chartDetail={\r\n        //                     dashboardCount[0]?.assignedToByStatus\r\n        //                       ? JSON?.parse(\r\n        //                           dashboardCount[0]?.assignedToByStatus\r\n        //                         )\r\n        //                       : []\r\n        //                   }\r\n        //                 />\r\n        //               </Grid>\r\n\r\n        //               <Grid item xs={12} sm={6}>\r\n        //                 <RevenuChartCard chartData={RevenueData} />\r\n        //               </Grid>\r\n        //             </Grid>\r\n        //           </Grid>\r\n        //         )}\r\n        //       {userDetail?.role !== Roles?.STAFF &&\r\n        //         userDetail?.role !== Roles?.VENDOR && (\r\n        //           <Grid item lg={4} xs={12}>\r\n        //             <Card\r\n        //               sx={{\r\n        //                 height: '90%',\r\n        //                 overflow: 'scroll',\r\n        //                 overflowX: 'hidden',\r\n        //                 overflowY: 'auto',\r\n        //               }}\r\n        //             >\r\n        //               <CardHeader\r\n        //                 title={\r\n        //                   <Typography component='div' className='card-header'>\r\n        //                     Traffic Sources\r\n        //                   </Typography>\r\n        //                 }\r\n        //               />\r\n        //               <Divider />\r\n        //               <CardContent>\r\n        //                 <Grid container spacing={gridSpacing}>\r\n        //                   {map(linChartData, (data) => {\r\n        //                     return (\r\n        //                       <Grid item xs={12}>\r\n        //                         <Grid container alignItems='center' spacing={1}>\r\n        //                           <Grid item sm zeroMinWidth>\r\n        //                             <Typography variant='body2'>\r\n        //                               {data?.name}\r\n        //                             </Typography>\r\n        //                           </Grid>\r\n        //                           <Grid item>\r\n        //                             <Typography variant='body2' align='right'>\r\n        //                               {round(\r\n        //                                 (data?.count /\r\n        //                                   sumBy(linChartData, 'count')) *\r\n        //                                   100,\r\n        //                                 1\r\n        //                               )}\r\n        //                               %\r\n        //                             </Typography>\r\n        //                           </Grid>\r\n        //                           <Grid item xs={12}>\r\n        //                             <LinearProgress\r\n        //                               variant='determinate'\r\n        //                               aria-label='direct'\r\n        //                               value={data?.count}\r\n        //                               color='primary'\r\n        //                             />\r\n        //                           </Grid>\r\n        //                         </Grid>\r\n        //                       </Grid>\r\n        //                     );\r\n        //                   })}\r\n        //                 </Grid>\r\n        //               </CardContent>\r\n        //             </Card>\r\n        //           </Grid>\r\n        //         )}\r\n\r\n        //       {/* <ApexChart\r\n        //           chartDetail={\r\n        //             dashboardCount[0]?.assignedToByStatus\r\n        //               ? JSON?.parse(dashboardCount[0]?.assignedToByStatus)\r\n        //               : []\r\n        //           }\r\n        //         /> */}\r\n        //     </Grid>\r\n        //   </Grid>\r\n        //   <Grid item xs={12}>\r\n        //     {userDetail?.role !== Roles?.STAFF &&\r\n        //       userDetail?.role !== Roles?.VENDOR && (\r\n        //         <Grid container sm={6} xs={12} spacing={2}>\r\n        //           <Grid item xs={12} sm={8}>\r\n        //             <SalesLineCard\r\n        //               chartData={SalesLineCardData}\r\n        //               title='Sales Per Day'\r\n        //               percentage='3%'\r\n        //               icon={<TrendingDownIcon />}\r\n        //               footerData={[\r\n        //                 {\r\n        //                   value: '$4230',\r\n        //                   label: 'Total Revenue',\r\n        //                 },\r\n        //                 {\r\n        //                   value: '321',\r\n        //                   label: 'Today Sales',\r\n        //                 },\r\n        //               ]}\r\n        //             />\r\n        //           </Grid>\r\n        //           <Grid item xs={12} sm={8}>\r\n        //             <Card>\r\n        //               <CardContent sx={{ p: '0 !important' }}>\r\n        //                 <Grid container alignItems='center' spacing={0}>\r\n        //                   <FlatCardBlock>\r\n        //                     <Grid container alignItems='center' spacing={1}>\r\n        //                       <Grid item>\r\n        //                         <Typography variant='subtitle2' align='left'>\r\n        //                           REALTY\r\n        //                         </Typography>\r\n        //                       </Grid>\r\n        //                       <Grid item sm zeroMinWidth>\r\n        //                         <Typography\r\n        //                           variant='h5'\r\n        //                           sx={{\r\n        //                             color: theme.palette.error.main,\r\n        //                           }}\r\n        //                           align='right'\r\n        //                         >\r\n        //                           -0.99\r\n        //                         </Typography>\r\n        //                       </Grid>\r\n        //                     </Grid>\r\n        //                   </FlatCardBlock>\r\n        //                   <FlatCardBlock>\r\n        //                     <Grid container alignItems='center' spacing={1}>\r\n        //                       <Grid item>\r\n        //                         <Typography variant='subtitle2' align='left'>\r\n        //                           INFRA\r\n        //                         </Typography>\r\n        //                       </Grid>\r\n        //                       <Grid item sm zeroMinWidth>\r\n        //                         <Typography\r\n        //                           variant='h5'\r\n        //                           sx={{\r\n        //                             color: theme.palette.success.main,\r\n        //                           }}\r\n        //                           align='right'\r\n        //                         >\r\n        //                           -7.66\r\n        //                         </Typography>\r\n        //                       </Grid>\r\n        //                     </Grid>\r\n        //                   </FlatCardBlock>\r\n        //                 </Grid>\r\n        //               </CardContent>\r\n        //             </Card>\r\n        //           </Grid>\r\n        //         </Grid>\r\n        //       )}\r\n        //   </Grid>\r\n        // </Grid>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Default;\r\n"],"names":["_ref2","data","categories","initiatedData","closedData","groupedData","omit","mapKeys","groupBy","_","key","head","split","combinedArray","map","group","name","counts","reduce","acc","_ref","status","count","includes","filter","checkStatus","type","closedCount","pendingCount","initiatedCount","undefined","processData","state","options","chart","id","toolbar","show","plotOptions","bar","horizontal","barHeight","dataLabels","enabled","colors","xaxis","labels","axisBorder","yaxis","axisTicks","grid","legend","series","_jsx","className","children","Chart","width","label","value","arcColors","_jsxs","Box","sx","display","flexDirection","justifyContent","alignItems","GaugeChart","arcWidth","nrOfLevels","needleBaseColor","arcsLength","cornerRadius","percent","arcPadding","hideText","flexWrap","gap","index","flexBasis","style","backgroundColor","height","borderRadius","color","styled","props","Grid","item","sm","xs","theme","padding","borderLeft","palette","background","default","breakpoints","down","borderBottom","Default","_localStorage","_localStorage2","_dashboardCount$","_dashboardCount$$chec","_JSON$parse","_dashboardCount$2","_dashboardCount$2$che","_dashboardCount$3","_dashboardCount$3$che","_dashboardCount$4","_dashboardCount$4$che","_find2","_dashboardCount$7","_dashboardCount$8","useTheme","dashboardCount","setDashboardCount","useState","loading","setLoading","selectedClient","setSelectedClient","userDetail","localStorage","getItem","JSON","parse","userClients","getDashboardCount","useCallback","async","_find","from","moment","clone","subtract","format","to","role","clientId","find","userId","_id","_response$data","response","RequestsApi","dashboardData","totalOrders","openOrderCount","closedOrderCount","totalChecks","openChecksCount","closedChecksCount","reorderedData","openOrders","closedOrders","openChecks","closedChecks","checksAssignedTo","assignedToByStatus","checksByClients","error","console","useEffect","ObjectKeys","isEmpty","Object","keys","revenueChartList","primary","light","warning","main","success","replace","revenueChartLabel","revenueChartValue","linChartData","compact","innerArray","zipObject","_Fragment","CircularProgress","size","clientRoles","pb","Select","onChange","event","target","variant","minWidth","p","client","option","i","MenuItem","client_name","container","spacing","_dashboardCount$5","_dashboardCount$6","md","Card","CardContent","direction","FaUserTie","fill","PiDotsThreeVerticalBold","Typography","fontSize","fontWeight","startCase","LinearProgress","marginBottom","gridSpacing","overflow","maxHeight","zeroMinWidth","align","round","sumBy","ApexChart"],"sourceRoot":""}