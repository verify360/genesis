{"version":3,"file":"static/js/86.817818ac.chunk.js","mappings":"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","sources":["views/MasterData/EmployeeMaster/index.js","../node_modules/@mui/icons-material/DeleteOutlined.js"],"sourcesContent":["// import * as React from 'react';\r\n// import Box from '@mui/material/Box';\r\n// import Grid from '@mui/material/Grid';\r\n// import Typography from '@mui/material/Typography';\r\n// import Paper from '@mui/material/Paper';\r\n// import Stack from '@mui/material/Stack';\r\n// import { DataGrid } from '@mui/x-data-grid';\r\n// // import {\r\n// //   randomCreatedDate,\r\n// //   randomPrice,\r\n// //   randomCurrency,\r\n// //   randomCountry,\r\n// //   randomCity,\r\n// //   randomEmail,\r\n// //   randomInt,\r\n// //   randomAddress,\r\n// //   randomCommodity,\r\n// // } from '@mui/x-data-grid-generator';\r\n\r\n// const columns = [\r\n//   { field: 'id', headerName: 'Order ID' },\r\n//   { field: 'customer', headerName: 'Customer', width: 200 },\r\n//   { field: 'date', headerName: 'Placed at' },\r\n//   { field: 'currency', headerName: 'Currency' },\r\n//   {\r\n//     field: 'total',\r\n//     type: 'number',\r\n//     headerName: 'Total',\r\n//     valueGetter: ({ row }) => {\r\n//       const subtotal = row.products.reduce(\r\n//         (acc, product) => product.unitPrice * product.quantity,\r\n//         0,\r\n//       );\r\n//       const taxes = subtotal * 0.05;\r\n//       return subtotal + taxes;\r\n//     },\r\n//   },\r\n// ];\r\n\r\n// function randomNumberInRange(min, max) {\r\n//   // üëáÔ∏è get number between min (inclusive) and max (inclusive)\r\n//   return Math.floor(Math.random() * (max - min + 1)) + min;\r\n// }\r\n\r\n// function DetailPanelContent({ row: rowProp }) {\r\n//   return (\r\n//     <Stack\r\n//       sx={{ py: 2, height: '100%', boxSizing: 'border-box' }}\r\n//       direction=\"column\"\r\n//     >\r\n//       <Paper sx={{ flex: 1, mx: 'auto', width: '90%', p: 1 }}>\r\n//         <Stack direction=\"column\" spacing={1} sx={{ height: 1 }}>\r\n//           <Typography variant=\"h6\">{`Order #${rowProp.id}`}</Typography>\r\n//           <Grid container>\r\n//             <Grid item md={6}>\r\n//               <Typography variant=\"body2\" color=\"textSecondary\">\r\n//                 Customer information\r\n//               </Typography>\r\n//               <Typography variant=\"body1\">{rowProp.customer}</Typography>\r\n//               <Typography variant=\"body1\">{rowProp.email}</Typography>\r\n//             </Grid>\r\n//             <Grid item md={6}>\r\n//               <Typography variant=\"body2\" align=\"right\" color=\"textSecondary\">\r\n//                 Shipping address\r\n//               </Typography>\r\n//               <Typography variant=\"body1\" align=\"right\">\r\n//                 {rowProp.address}\r\n//               </Typography>\r\n//               <Typography variant=\"body1\" align=\"right\">\r\n//                 {`${rowProp.city}, ${rowProp.country.label}`}\r\n//               </Typography>\r\n//             </Grid>\r\n//           </Grid>\r\n//           <DataGridPro\r\n//             density=\"compact\"\r\n//             columns={[\r\n//               { field: 'name', headerName: 'Product', flex: 1 },\r\n//               {\r\n//                 field: 'quantity',\r\n//                 headerName: 'Quantity',\r\n//                 align: 'center',\r\n//                 type: 'number',\r\n//               },\r\n//               { field: 'unitPrice', headerName: 'Unit Price', type: 'number' },\r\n//               {\r\n//                 field: 'total',\r\n//                 headerName: 'Total',\r\n//                 type: 'number',\r\n//                 valueGetter: ({ row }) => row.quantity * row.unitPrice,\r\n//               },\r\n//             ]}\r\n//             rows={rowProp.products}\r\n//             sx={{ flex: 1 }}\r\n//             hideFooter\r\n//           />\r\n//         </Stack>\r\n//       </Paper>\r\n//     </Stack>\r\n//   );\r\n// }\r\n\r\n// function generateProducts() {\r\n//   const quantity = randomNumberInRange(1, 5);\r\n//   return [...Array(quantity)].map((_, index) => ({\r\n//     id: index,\r\n//     name: 'Product ' + index,\r\n//     quantity: randomNumberInRange(1, 5),\r\n//     unitPrice: randomNumberInRange(1, 1000),\r\n//   }));\r\n// }\r\n\r\n// const rows = [\r\n//   {\r\n//     id: 1,\r\n//     customer: 'Matheus',\r\n//     email: 'some@email.com',\r\n//     date: '18-09-2023',\r\n//     address: 'Some Address',\r\n//     country: 'My Country',\r\n//     city: 'My City',\r\n//     currency: 'INR',\r\n//     products: generateProducts(),\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     customer: 'Olivier',\r\n//     email: 'some@email.com',\r\n//     date: '18-09-2023',\r\n//     address: 'Some Address',\r\n//     country: 'My Country',\r\n//     city: 'My City',\r\n//     currency: 'INR',\r\n//     products: generateProducts(),\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     customer: 'Flavien',\r\n//     email: 'some@email.com',\r\n//     date: '18-09-2023',\r\n//     address: 'Some Address',\r\n//     country: 'My Country',\r\n//     city: 'My City',\r\n//     currency: 'INR',\r\n//     products: generateProducts(),\r\n//   },\r\n//   {\r\n//     id: 4,\r\n//     customer: 'Danail',\r\n//     email: 'some@email.com',\r\n//     date: '18-09-2023',\r\n//     address: 'Some Address',\r\n//     country: 'My Country',\r\n//     city: 'My City',\r\n//     currency: 'INR',\r\n//     products: generateProducts(),\r\n//   },\r\n//   {\r\n//     id: 5,\r\n//     customer: 'Alexandre',\r\n//     email: 'some@email.com',\r\n//     date: '18-09-2023',\r\n//     address: 'Some Address',\r\n//     country: 'My Country',\r\n//     city: 'My City',\r\n//     currency: 'INR',\r\n//     products: generateProducts(),\r\n//   },\r\n// ];\r\n\r\n// export default function BasicDetailPanels() {\r\n//   const getDetailPanelContent = React.useCallback(\r\n//     ({ row }) => <DetailPanelContent row={row} />,\r\n//     [],\r\n//   );\r\n\r\n//   const getDetailPanelHeight = React.useCallback(() => 400, []);\r\n\r\n//   return (\r\n//     <Box sx={{ width: '100%', height: 400 }}>\r\n//       <DataGrid\r\n//         columns={columns}\r\n//         rows={rows}\r\n//         checkboxSelection disableRowSelectionOnClick\r\n//         rowThreshold={0}\r\n//         getDetailPanelHeight={getDetailPanelHeight}\r\n//         getDetailPanelContent={getDetailPanelContent}\r\n//       />\r\n//     </Box>\r\n//   );\r\n// }\r\n\r\n\r\nimport * as React from 'react';\r\nimport { alpha, styled } from '@mui/material/styles';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Close';\r\nimport {\r\n  GridRowModes,\r\n  DataGrid, gridClasses, \r\n  GridToolbar, \r\n  GridToolbarContainer,\r\n  GridActionsCellItem,\r\n  GridRowEditStopReasons,\r\n} from '@mui/x-data-grid';\r\nimport \"../Style.css\";\r\nimport { usStates } from 'views/Utils/Common';\r\n\r\n\r\nconst roles = ['Market', 'Finance', 'Development'];\r\n// const randomRole = () => {\r\n//   return randomArrayItem(roles);\r\n// };\r\n\r\nconst initialRows = [\r\n    {\r\n        id: '9s41rp',\r\n        firstName: 'Kelvin',\r\n        lastName: 'Langosh',\r\n        email: 'Jerod14@hotmail.com',\r\n        age: 19,\r\n        state: 'Ohio',\r\n      },\r\n      {\r\n        id: '08m6rx',\r\n        firstName: 'Molly',\r\n        lastName: 'Purdy',\r\n        email: 'Hugh.Dach79@hotmail.com',\r\n        age: 37,\r\n        state: 'Rhode Island',\r\n      },\r\n      {\r\n        id: '5ymtrc',\r\n        firstName: 'Henry',\r\n        lastName: 'Lynch',\r\n        email: 'Camden.Macejkovic@yahoo.com',\r\n        age: 20,\r\n        state: 'California',\r\n      },\r\n      {\r\n        id: 'ek5b97',\r\n        firstName: 'Glenda',\r\n        lastName: 'Douglas',\r\n        email: 'Eric0@yahoo.com',\r\n        age: 38,\r\n        state: 'Montana',\r\n      },\r\n      {\r\n        id: 'xxtydd',\r\n        firstName: 'Leone',\r\n        lastName: 'Williamson',\r\n        email: 'Ericka_Mueller52@yahoo.com',\r\n        age: 19,\r\n        state: 'Colorado',\r\n      },\r\n      {\r\n        id: 'wzxj9m',\r\n        firstName: 'Mckenna',\r\n        lastName: 'Friesen',\r\n        email: 'Veda_Feeney@yahoo.com',\r\n        age: 34,\r\n        state: 'New York',\r\n      },\r\n      {\r\n        id: '21dwtz',\r\n        firstName: 'Wyman',\r\n        lastName: 'Jast',\r\n        email: 'Melvin.Pacocha@yahoo.com',\r\n        age: 23,\r\n        state: 'Montana',\r\n      },\r\n      {\r\n        id: 'o8oe4k',\r\n        firstName: 'Janick',\r\n        lastName: 'Willms',\r\n        email: 'Delfina12@gmail.com',\r\n        age: 25,\r\n        state: 'Nebraska',\r\n      },\r\n];\r\n\r\nfunction EditToolbar(props) {\r\n  const { setRows, setRowModesModel } = props;\r\n\r\n  const handleClick = () => {\r\n    const id = Math.random();\r\n    setRows((oldRows) => [{ id, firstName: '', lastName: '', email: '', age: '', state: '' }, ...oldRows]);\r\n    setRowModesModel((oldModel) => ({\r\n      [id]: { mode: GridRowModes.Edit, fieldToFocus: 'name' },\r\n      ...oldModel,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <GridToolbarContainer>\r\n      <Button color=\"primary\" startIcon={<AddIcon />} onClick={handleClick} style={{ float: 'right' }}>\r\n        Add Employee\r\n      </Button>\r\n      <GridToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nexport default function FullFeaturedCrudGrid() {\r\n  const [rows, setRows] = React.useState(initialRows);\r\n  const [rowModesModel, setRowModesModel] = React.useState({});\r\n\r\n  const handleRowEditStop = (params, event) => {\r\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\r\n      event.defaultMuiPrevented = true;\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (id) => () => {\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n  };\r\n\r\n  const handleSaveClick = (id) => () => {\r\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n  };\r\n\r\n  const handleDeleteClick = (id) => () => {\r\n    setRows(rows.filter((row) => row.id !== id));\r\n  };\r\n\r\n  const handleCancelClick = (id) => () => {\r\n    setRowModesModel({\r\n      ...rowModesModel,\r\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n    });\r\n\r\n    const editedRow = rows.find((row) => row.id === id);\r\n    if (editedRow.isNew) {\r\n      setRows(rows.filter((row) => row.id !== id));\r\n    }\r\n  };\r\n\r\n  const processRowUpdate = (newRow) => {\r\n    const updatedRow = { ...newRow, isNew: false };\r\n    setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n    return updatedRow;\r\n  };\r\n\r\n  const handleRowModesModelChange = (newRowModesModel) => {\r\n    setRowModesModel(newRowModesModel);\r\n  };\r\n\r\n  const columns = [\r\n    { field: 'firstName', headerName: 'First Name', width: 180, editable: true },\r\n    { field: 'lastName', headerName: 'Last Name', width: 180, editable: true },\r\n    {\r\n      field: 'email',\r\n      headerName: 'Email',\r\n      type: 'email',\r\n      width: 180,\r\n      editable: true,\r\n    },\r\n    {\r\n      field: 'age',\r\n      headerName: 'Age',\r\n      type: 'number',\r\n      width: 80,\r\n      align: 'left',\r\n      headerAlign: 'left',\r\n      editable: true,\r\n    },\r\n    {\r\n      field: 'state',\r\n      headerName: 'State',\r\n      width: 220,\r\n      editable: true,\r\n      type: 'singleSelect',\r\n      valueOptions: usStates,\r\n    },\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'Actions',\r\n      width: 100,\r\n      cellClassName: 'actions',\r\n      getActions: ({ id }) => {\r\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n\r\n        if (isInEditMode) {\r\n          return [\r\n            <GridActionsCellItem\r\n              icon={<SaveIcon />}\r\n              label=\"Save\"\r\n              sx={{\r\n                color: 'primary.main',\r\n              }}\r\n              onClick={handleSaveClick(id)}\r\n            />,\r\n            <GridActionsCellItem\r\n              icon={<CancelIcon />}\r\n              label=\"Cancel\"\r\n              className=\"textPrimary\"\r\n              onClick={handleCancelClick(id)}\r\n              color=\"inherit\"\r\n            />,\r\n          ];\r\n        }\r\n\r\n        return [\r\n          <GridActionsCellItem\r\n            icon={<EditIcon />}\r\n            label=\"Edit\"\r\n            className=\"textPrimary\"\r\n            onClick={handleEditClick(id)}\r\n            color=\"inherit\"\r\n          />,\r\n          <GridActionsCellItem\r\n            icon={<DeleteIcon />}\r\n            label=\"Delete\"\r\n            onClick={handleDeleteClick(id)}\r\n            color=\"inherit\"\r\n          />,\r\n        ];\r\n      },\r\n    },\r\n  ];\r\n\r\n  const ODD_OPACITY = 0.2;\r\n\r\n  const StripedDataGrid = styled(DataGrid)(({ theme }) => ({\r\n    [`& .${gridClasses.main}`]: {\r\n        backgroundColor: '#e3f2fd', // theme.palette.grey[200],\r\n    },\r\n    [`& .${gridClasses.columnHeader}`]: {\r\n        backgroundColor: '#a8d6f8', // theme.palette.grey[200],\r\n    },\r\n    [`& .${gridClasses.columnHeaders}`]: {\r\n      backgroundColor: '#a8d6f8', // theme.palette.grey[200],\r\n  },\r\n    [`& .${gridClasses.row}.even`]: {\r\n      backgroundColor: 'white', // theme.palette.grey[200],\r\n        '&:hover, &.Mui-hovered': {\r\n        backgroundColor: '#e3f2fd', // alpha(theme.palette.primary.main, ODD_OPACITY),\r\n        '@media (hover: none)': {\r\n          backgroundColor: theme.palette.grey[500],\r\n        },\r\n      },\r\n      '&.Mui-selected': {\r\n        backgroundColor: alpha(\r\n          theme.palette.primary.main,\r\n          ODD_OPACITY + theme.palette.action.selectedOpacity,\r\n        ),\r\n        '&:hover, &.Mui-hovered': {\r\n          backgroundColor: alpha(\r\n            theme.palette.primary.main,\r\n            ODD_OPACITY +\r\n              theme.palette.action.selectedOpacity +\r\n              theme.palette.action.hoverOpacity,\r\n          ),\r\n          // Reset on touch devices, it doesn't add specificity\r\n          '@media (hover: none)': {\r\n            backgroundColor: alpha(\r\n              theme.palette.primary.main,\r\n              ODD_OPACITY + theme.palette.action.selectedOpacity,\r\n            ),\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n\r\n  return (\r\n    <Box\r\n    sx={{\r\n      // height: 500,\r\n      width: '100%',\r\n      '& .actions': {\r\n          color: 'text.secondary',\r\n      },\r\n      '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px'\r\n      },\r\n      '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px'\r\n      },\r\n      '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n      },\r\n      '& .MuiDataGrid-columnHeaders': {\r\n          bgcolor: '#a8d6f8',\r\n      }\r\n  }}\r\n>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        checkboxSelection disableRowSelectionOnClick\r\n        editMode=\"row\"\r\n        rowModesModel={rowModesModel}\r\n        onRowModesModelChange={handleRowModesModelChange}\r\n        onRowEditStop={handleRowEditStop}\r\n        processRowUpdate={processRowUpdate}\r\n        slots={{\r\n          toolbar: EditToolbar, \r\n        }}\r\n        slotProps={{\r\n          toolbar: { setRows, setRowModesModel },\r\n        }}\r\n        getRowClassName={(params) =>\r\n          params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n        }\r\n      />\r\n    </Box>\r\n  );\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n}), 'DeleteOutlined');\nexports.default = _default;"],"names":["initialRows","id","firstName","lastName","email","age","state","EditToolbar","props","setRows","setRowModesModel","_jsxs","GridToolbarContainer","children","_jsx","Button","color","startIcon","AddIcon","onClick","handleClick","Math","random","oldRows","oldModel","mode","GridRowModes","fieldToFocus","style","float","GridToolbar","FullFeaturedCrudGrid","rows","React","rowModesModel","handleEditClick","handleSaveClick","handleDeleteClick","filter","row","handleCancelClick","ignoreModifications","find","isNew","columns","field","headerName","width","editable","type","align","headerAlign","valueOptions","usStates","cellClassName","getActions","_ref","_rowModesModel$id","GridActionsCellItem","icon","SaveIcon","label","sx","CancelIcon","className","EditIcon","DeleteIcon","styled","DataGrid","_ref2","theme","concat","gridClasses","backgroundColor","palette","grey","alpha","primary","main","action","selectedOpacity","hoverOpacity","Box","fontSize","fontWeight","bgcolor","checkboxSelection","disableRowSelectionOnClick","editMode","onRowModesModelChange","newRowModesModel","onRowEditStop","handleRowEditStop","params","event","reason","GridRowEditStopReasons","defaultMuiPrevented","processRowUpdate","newRow","updatedRow","map","slots","toolbar","slotProps","getRowClassName","indexRelativeToCurrentPage","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}