{"version":3,"file":"static/js/324.ab26f66b.chunk.js","mappings":"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","sources":["views/MasterData/PriceMaster/ClientPriceMaster.js","views/MasterData/PriceMaster/EditableDataGrid.js","../node_modules/@mui/icons-material/DeleteOutlined.js","../node_modules/@mui/material/CardHeader/cardHeaderClasses.js","../node_modules/@mui/material/CardHeader/CardHeader.js"],"sourcesContent":["import RequestsApi from 'api/requests';\r\nimport React, { useEffect, useState } from 'react';\r\nimport {\r\n  Roles,\r\n  clientRoles,\r\n  countryList,\r\n  currencyList,\r\n  toastMessage,\r\n} from 'views/Utils/Common';\r\nimport EditableDataGrid from './EditableDataGrid';\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n} from '@mui/material';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport AddBoxRoundedIcon from '@mui/icons-material/AddBoxRounded';\r\nimport IndeterminateCheckBoxRoundedIcon from '@mui/icons-material/IndeterminateCheckBoxRounded';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport {\r\n  compact,\r\n  concat,\r\n  filter,\r\n  find,\r\n  includes,\r\n  isEmpty,\r\n  isNumber,\r\n  map,\r\n} from 'lodash';\r\nimport '../Style.css';\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst iValues = {\r\n  check_name: '',\r\n  cost: '',\r\n  category: '',\r\n};\r\n\r\nexport default function ClientChecksPriceMaster() {\r\n  const navigate = useNavigate();\r\n  const [clientCheckData, setClientCheckData] = useState([]);\r\n  const [expandedRow, setExpandedRow] = useState(null);\r\n  const [discount, setDiscount] = useState(0);\r\n  const [clientCheckRows, setClientCheckRows] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [selectedClient, setSelectedClient] = useState(null);\r\n  const [selectedPackage, setSelectedPackage] = useState(null);\r\n  const [packageChecks, setPackageChecks] = useState([]);\r\n  const [checksToPackage, setChecksToPackage] = useState([]);\r\n  const [clientsList, setClientsList] = useState([]);\r\n  const [packagePrice, setPackagePrice] = useState(0);\r\n  const [isAlaCartePackage, setIsAlaCartePackage] = useState(false);\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n  const [packagesList, setPackagesList] = useState([]);\r\n\r\n  let response = [];\r\n  let pChecks = [];\r\n\r\n  useEffect(() => {\r\n    const fetchClientData = () => {\r\n      try {\r\n        response = RequestsApi.ListChecksByClientPackage(\r\n          selectedClient,\r\n          selectedPackage\r\n        );\r\n        response.then((resp) => {\r\n          let checks = JSON.parse(resp.data.data);\r\n          let prices = [];\r\n          let cp = [];\r\n          let currencies = {};\r\n          checks.map((check) => {\r\n            pChecks.push(check.check_id);\r\n            cp = [];\r\n            cp = check.price;\r\n            countryList.map((country, i) => {\r\n              currencies['id'] = i;\r\n              currencies['country'] = country;\r\n              currencyList?.map((c) => {\r\n                currencies[c] = cp?.length ? cp[i][c] : 0;\r\n              });\r\n              prices[i] = currencies;\r\n              currencies = {};\r\n              i++;\r\n            });\r\n            check['price'] = prices;\r\n            prices = [];\r\n          });\r\n          setClientCheckData(checks);\r\n          setClientCheckRows(checks);\r\n          setPackageChecks(pChecks);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    if (selectedPackage) {\r\n      fetchClientData();\r\n    }\r\n  }, [selectedPackage]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        response = [];\r\n        response = RequestsApi.ListExChecks(packageChecks);\r\n        response.then((resp) => {\r\n          let checks = JSON.parse(resp.data.data);\r\n          let prices = [];\r\n          let cp = [];\r\n          let currencies = {};\r\n          checks.map((check) => {\r\n            cp = [];\r\n            cp = check.price;\r\n            countryList.map((country, i) => {\r\n              currencies['id'] = i;\r\n              currencies['country'] = country;\r\n              currencyList?.map((c) => {\r\n                currencies[c] = cp.length ? cp[i][c] : 0;\r\n              });\r\n              prices[i] = currencies;\r\n              currencies = {};\r\n              i++;\r\n            });\r\n            check['price'] = prices;\r\n            prices = [];\r\n          });\r\n          setRows(checks);\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    if (selectedPackage) {\r\n      fetchData();\r\n    }\r\n  }, [packageChecks]);\r\n\r\n  const handleExpandRow = (index) => {\r\n    setExpandedRow(index);\r\n  };\r\n\r\n  const handleSave = (id, rows, tatValue) => {\r\n    const editedRow = clientCheckData.find((row) => row.id === id);\r\n    editedRow.price = rows;\r\n    editedRow.tat = tatValue;\r\n\r\n    let response = RequestsApi.UpdateClientChecksPrices({\r\n      id,\r\n      data: { price: rows, tat: parseInt(tatValue) },\r\n    });\r\n  };\r\n\r\n  const handleDiscount = (e) => {\r\n    let discInput = e.target.value || 0;\r\n\r\n    let maxDiscount = 30;\r\n    let disc = discInput <= maxDiscount ? discInput : maxDiscount;\r\n    const discData = JSON.parse(JSON.stringify(clientCheckData));\r\n    discData.map((drow) => {\r\n      drow.price.map((row) => {\r\n        currencyList?.map((c) => {\r\n          row[c] = row[c] ? row[c] - row[c] * (disc / 100) : 0;\r\n        });\r\n      });\r\n    });\r\n    setClientCheckRows(discData);\r\n    setDiscount(parseFloat(disc));\r\n    setExpandedRow(null);\r\n  };\r\n\r\n  const resetStates = () => {\r\n    setClientCheckData([]);\r\n    setExpandedRow(null);\r\n    setDiscount(0);\r\n    setClientCheckRows([]);\r\n    setRows([]);\r\n    setSelectedPackage(null);\r\n    setPackageChecks([]);\r\n    setChecksToPackage([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (includes(clientRoles, userDetail?.role)) {\r\n      setSelectedClient(userDetail?.client_id);\r\n    }\r\n  }, []);\r\n\r\n  const handleClientChange = (event) => {\r\n    resetStates();\r\n    setSelectedClient(event.target.value);\r\n  };\r\n\r\n  const handlePackageChange = (event, newValue) => {\r\n    const packageDetail = find(packagesList, { package_name: newValue });\r\n    setSelectedPackage(newValue);\r\n    setDiscount(packageDetail?.discount);\r\n    setIsAlaCartePackage(packageDetail?.isAlaCarte);\r\n    setPackagePrice(packageDetail?.price);\r\n  };\r\n\r\n  const handlePackagePrice = (event) => {\r\n    setPackagePrice(parseInt(event?.target?.value));\r\n  };\r\n\r\n  const handleCheckChange = (event, id, name) => {\r\n    if (event?.target?.checked) {\r\n      setChecksToPackage((prev) => [...prev, { id: id, name: name }]);\r\n    } else {\r\n      setChecksToPackage((prev) => prev.filter((p) => p.id !== id));\r\n    }\r\n  };\r\n\r\n  const handleUpdatePackage = () => {\r\n    let clientName = clientsList.filter((p) => p.id === selectedClient)[0]\r\n      .client_name;\r\n    let packagedata = {\r\n      client_id: selectedClient,\r\n      client_name: clientName,\r\n      package_name: selectedPackage,\r\n      discount: discount,\r\n      isAlaCarte: isAlaCartePackage,\r\n      active: true,\r\n      price: packagePrice,\r\n    };\r\n\r\n    let checks = checksToPackage;\r\n    let checksdata = [];\r\n    checks?.map((check) => {\r\n      return checksdata.push({\r\n        check_id: check.id,\r\n        check_name: check.name,\r\n        client_id: selectedClient,\r\n        client_name: clientName,\r\n        package_name: selectedPackage,\r\n        overall_discount: discount,\r\n        active: true,\r\n      });\r\n    });\r\n\r\n    let response = RequestsApi.AddUpdateClientPackage({\r\n      packagedata,\r\n      checksdata,\r\n    });\r\n    response?.then((resp) => {\r\n      if (resp?.status === 200) {\r\n        toastMessage('Package updated successfully');\r\n        setSelectedClient('');\r\n        setSelectedPackage('');\r\n        setDiscount('');\r\n        setPackagePrice('');\r\n        setRows([]);\r\n        setClientCheckRows([]);\r\n      }\r\n    });\r\n  };\r\n\r\n  const updateCheck = (checkId) => {\r\n    let data = {\r\n      table_name: 'client_checks',\r\n      field_to_update: 'active',\r\n      new_value: false,\r\n      table_id: checkId,\r\n    };\r\n    try {\r\n      const response = RequestsApi.UpdateData(data);\r\n      response?.then((res) => {\r\n        if (res?.status === 200) {\r\n          const checkData = filter(\r\n            clientCheckRows,\r\n            (data) => data?.id === checkId\r\n          );\r\n          setClientCheckRows(\r\n            filter(clientCheckRows, (data) => data?.id !== checkId)\r\n          );\r\n          setRows(concat(rows, checkData));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching checks:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        // height: 500,\r\n        width: '100%',\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeaders': {\r\n          bgcolor: '#a8d6f8',\r\n        },\r\n      }}\r\n    >\r\n      <Card>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            padding: '2rem',\r\n          }}\r\n        >\r\n          <ClientDropdown\r\n            handleClientChange={handleClientChange}\r\n            selectedClient={selectedClient}\r\n            setSelectedClient={setSelectedClient}\r\n            clientsList={clientsList}\r\n            setClientsList={setClientsList}\r\n          />\r\n\r\n          <PackagesDropdown\r\n            selectedClient={selectedClient}\r\n            selectedPackage={selectedPackage}\r\n            setSelectedPackage={setSelectedPackage}\r\n            handlePackageChange={handlePackageChange}\r\n            packagesList={packagesList}\r\n            setPackagesList={setPackagesList}\r\n          />\r\n          <div>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={isAlaCartePackage}\r\n                  onChange={(e) => {\r\n                    setIsAlaCartePackage(e?.target?.checked);\r\n                    if (e?.target?.checked) {\r\n                      const checkList = map(rows, (check) => {\r\n                        if (\r\n                          check?.check_fields &&\r\n                          !isEmpty(JSON.parse(check?.check_fields))\r\n                        ) {\r\n                          return {\r\n                            id: check?.id,\r\n                            name: check.check_name,\r\n                          };\r\n                        }\r\n                      });\r\n                      setClientCheckRows(\r\n                        compact(\r\n                          map(rows, (check) => {\r\n                            if (\r\n                              check?.check_fields &&\r\n                              !isEmpty(JSON.parse(check?.check_fields))\r\n                            ) {\r\n                              return check;\r\n                            }\r\n                          })\r\n                        )\r\n                      );\r\n\r\n                      setChecksToPackage((prev) => [\r\n                        ...prev,\r\n                        ...compact(checkList),\r\n                      ]);\r\n                    }\r\n                  }}\r\n                />\r\n              }\r\n              label='A LA Carte?'\r\n            />\r\n          </div>\r\n          <TextField\r\n            sx={{ width: 100, float: 'left' }}\r\n            type='number'\r\n            defaultValue={0}\r\n            onChange={handleDiscount}\r\n            placeholder='Overall Discount %'\r\n            label='Overall Discount %'\r\n          />\r\n          <Box sx={{ display: 'flex', flexDirection: 'column' }}>\r\n            <TextField\r\n              sx={{ width: 100, float: 'left' }}\r\n              type='number'\r\n              defaultValue={0}\r\n              value={packagePrice}\r\n              onChange={handlePackagePrice}\r\n              placeholder='Package Price'\r\n              label='Package Price'\r\n            />\r\n            {!isAlaCartePackage && selectedClient && (\r\n              <Typography\r\n                sx={{ color: '#bf1e2e', fontSize: '0.65rem!important' }}\r\n              >\r\n                {!isNumber(packagePrice)\r\n                  ? 'Package price is required'\r\n                  : packagePrice <= 0 && 'Package price > 0'}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n\r\n          <Button\r\n            onClick={handleUpdatePackage}\r\n            variant='contained'\r\n            style={{ height: '49px' }}\r\n            disabled={\r\n              !isAlaCartePackage &&\r\n              (!isNumber(packagePrice) || packagePrice <= 0)\r\n            }\r\n          >\r\n            Add/Update Package\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          sx={{\r\n            width: '100%',\r\n            padding: 0,\r\n            '& .MuiCardHeader-root': {\r\n              padding: '16px !important',\r\n            },\r\n            '& .MuiCardContent-root': {\r\n              padding: '5px !important',\r\n            },\r\n          }}\r\n        >\r\n          <p></p>\r\n          {clientCheckRows.map((check) => (\r\n            <React.Fragment key={check.id}>\r\n              <Card sx={{ border: '6px solid #fff' }}>\r\n                <CardHeader\r\n                  sx={{ background: '#B7C0D0' }}\r\n                  title={check.check_name}\r\n                  action={\r\n                    expandedRow === check.id ? (\r\n                      <RemoveIcon\r\n                        onClick={() => setExpandedRow(null)}\r\n                        sx={{ cursor: 'pointer' }}\r\n                      />\r\n                    ) : (\r\n                      <AddIcon\r\n                        onClick={() => handleExpandRow(check.id)}\r\n                        sx={{ cursor: 'pointer' }}\r\n                      />\r\n                    )\r\n                  }\r\n                />\r\n                {expandedRow === check.id && (\r\n                  <>\r\n                    <CardContent>\r\n                      <EditableDataGrid\r\n                        data={check.price}\r\n                        onSave={handleSave}\r\n                        rowId={check.id}\r\n                        isClientChecksPrice={true}\r\n                        tat={check?.tat || 14}\r\n                      />\r\n                    </CardContent>\r\n                  </>\r\n                )}\r\n              </Card>\r\n              <p></p>\r\n            </React.Fragment>\r\n          ))}\r\n\r\n          <p>&nbsp;</p>\r\n          <p>&nbsp;</p>\r\n\r\n          {selectedPackage && clientCheckRows && (\r\n            <Card sx={{ background: '#2152a1', color: 'white' }}>\r\n              <CardHeader\r\n                title={\r\n                  <Typography\r\n                    sx={{\r\n                      background: '#2152a1',\r\n                      color: 'white',\r\n                      fontWeight: 'bold',\r\n                    }}\r\n                  >\r\n                    Checks included in Package\r\n                  </Typography>\r\n                }\r\n              />\r\n            </Card>\r\n          )}\r\n          <p></p>\r\n          <Grid\r\n            container\r\n            spacing={{ xs: 2, md: 3 }}\r\n            columns={{ xs: 4, sm: 8, md: 12 }}\r\n          >\r\n            {clientCheckRows.map((check, index) => (\r\n              <React.Fragment key={check.id}>\r\n                <Grid item xs={2} sm={4} md={4} key={index}>\r\n                  <Card>\r\n                    <CardContent>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            checked={true}\r\n                            onClick={() => updateCheck(check?.id)}\r\n                          />\r\n                        }\r\n                        label={check.check_name}\r\n                      />\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <p></p>\r\n              </React.Fragment>\r\n            ))}\r\n          </Grid>\r\n\r\n          <p>&nbsp;</p>\r\n          <p>&nbsp;</p>\r\n\r\n          {selectedPackage && rows && (\r\n            <Card sx={{ background: '#2152a1', color: 'white' }}>\r\n              <CardHeader\r\n                title={\r\n                  <Typography\r\n                    sx={{\r\n                      background: '#2152a1',\r\n                      color: 'white',\r\n                      fontWeight: 'bold',\r\n                    }}\r\n                  >\r\n                    Checks not included in Package\r\n                  </Typography>\r\n                }\r\n              />\r\n            </Card>\r\n          )}\r\n          <p></p>\r\n          <Grid\r\n            container\r\n            spacing={{ xs: 2, md: 3 }}\r\n            columns={{ xs: 4, sm: 8, md: 12 }}\r\n          >\r\n            {rows.map((check, index) => (\r\n              <React.Fragment key={check.id}>\r\n                <Grid item xs={2} sm={4} md={4} key={index}>\r\n                  <Card>\r\n                    <CardContent\r\n                      sx={{ display: 'flex', justifyContent: 'space-between' }}\r\n                    >\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox\r\n                            disabled={\r\n                              !check?.check_fields ||\r\n                              (check?.check_fields &&\r\n                                isEmpty(JSON.parse(check?.check_fields)))\r\n                            }\r\n                            onClick={(e) =>\r\n                              handleCheckChange(e, check.id, check.check_name)\r\n                            }\r\n                          />\r\n                        }\r\n                        label={check.check_name}\r\n                      />\r\n                      {(!check?.check_fields ||\r\n                        (check?.check_fields &&\r\n                          isEmpty(JSON.parse(check?.check_fields)))) && (\r\n                        <Button\r\n                          onClick={() =>\r\n                            navigate(`/master/checks/${check?.id}`)\r\n                          }\r\n                        >\r\n                          Add Form\r\n                        </Button>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <p></p>\r\n              </React.Fragment>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst ClientDropdown = ({\r\n  handleClientChange,\r\n  selectedClient,\r\n  clientsList,\r\n  setClientsList,\r\n}) => {\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n  const userClients = localStorage.getItem('clients')\r\n    ? JSON.parse(localStorage.getItem('clients'))\r\n    : '';\r\n\r\n  const getClientList = () => {\r\n    try {\r\n      let response = [];\r\n      response = RequestsApi.ListClients();\r\n      response.then((resp) => {\r\n        setClientsList(JSON.parse(resp.data.data));\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const allClients = userClients[0]?.allClient;\r\n    if (userClients) {\r\n      if (allClients || userDetail?.role === Roles?.ADMIN) {\r\n        getClientList();\r\n      } else {\r\n        setClientsList(userClients);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Select\r\n      name='client_id'\r\n      id='client_id'\r\n      label='Select Client'\r\n      sx={{ width: '350px', float: 'left' }}\r\n      className='selectfield'\r\n      value={selectedClient || 0}\r\n      onChange={handleClientChange}\r\n      disabled={includes(clientRoles, userDetail?.role)}\r\n    >\r\n      <MenuItem value='0'>Select Client</MenuItem>\r\n      {clientsList.map((option, i) => (\r\n        <MenuItem value={option.id} key={i}>\r\n          {option.client_name}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nconst PackagesDropdown = ({\r\n  selectedClient,\r\n  selectedPackage,\r\n  setSelectedPackage,\r\n  handlePackageChange,\r\n  packagesList,\r\n  setPackagesList,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [newOptionAdded, setnewOptionAdded] = useState(false);\r\n\r\n  let response = [];\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        response = RequestsApi.ListPackagesByClient(selectedClient);\r\n        response.then((resp) => {\r\n          setPackagesList(JSON.parse(resp.data.data));\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    if (selectedClient) {\r\n      setInputValue('');\r\n      fetchData();\r\n    }\r\n  }, [selectedClient]);\r\n\r\n  const handleInputChange = (event, newInputValue) => {\r\n    setInputValue(newInputValue);\r\n    if (newInputValue && !packagesList.includes(newInputValue)) {\r\n      setnewOptionAdded(true);\r\n    }\r\n  };\r\n\r\n  const handleAddOption = (e) => {\r\n    if (inputValue) {\r\n      packagesList.push(inputValue);\r\n      setSelectedPackage(inputValue);\r\n      setInputValue('');\r\n      setnewOptionAdded(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        freeSolo\r\n        value={selectedPackage}\r\n        onChange={handlePackageChange}\r\n        inputValue={inputValue}\r\n        onInputChange={handleInputChange}\r\n        id='autocomplete'\r\n        options={map(packagesList, 'package_name')}\r\n        style={{ width: '350px', float: 'left' }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label='Add New/Select Package'\r\n            variant='outlined'\r\n          />\r\n        )}\r\n      />\r\n      {newOptionAdded && (\r\n        <>\r\n          <br />\r\n          {!selectedPackage && (\r\n            <Button onClick={handleAddOption} variant='undefined'>\r\n              {!find(packagesList, { package_name: inputValue }) && (\r\n                <div>\r\n                  <span style={{ color: 'gray' }}>Add </span>\r\n                  &nbsp;&nbsp;&nbsp;\r\n                  <span> {inputValue}</span>\r\n                </div>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// src/components/EditableDataGrid.js\nimport React, { useEffect, useState } from 'react';\nimport {\n  GridRowModes,\n  DataGrid,\n  GridToolbarContainer,\n  GridActionsCellItem,\n  GridRowEditStopReasons,\n  GridToolbar,\n} from '@mui/x-data-grid';\nimport {\n  Box,\n  IconButton,\n  Button,\n  Toolbar,\n  Typography,\n  TextField,\n} from '@mui/material';\nimport { MdOutlineEdit } from 'react-icons/md';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Close';\nimport { filter, keyBy, map, mapValues } from 'lodash';\nimport { VscReplaceAll } from 'react-icons/vsc';\n\nconst EditableDataGrid = ({\n  data,\n  onSave,\n  rowId,\n  isClientChecksPrice = false,\n  tat = 14,\n}) => {\n  const [rows, setRows] = useState(data);\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const [tatValue, setTatValue] = useState(14);\n\n  const handleEditCellChange = (params) => {\n    const updatedRows = [...rows];\n    const { id, field, props } = params;\n\n    updatedRows[id].rate[field] = props.value;\n    setRows(updatedRows);\n  };\n\n  const columns = [\n    { field: 'country', headerName: 'Country', width: 250, editable: false },\n    {\n      field: 'INR',\n      headerName: 'INR',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'USD',\n      headerName: 'USD',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'GBP',\n      headerName: 'GBP',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'EUR',\n      headerName: 'EUR',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'AED',\n      headerName: 'AED',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'SGD',\n      headerName: 'SGD',\n      flex: 1,\n      editable: true,\n      sortable: false,\n      filterable: false,\n    },\n    {\n      field: 'actions',\n      type: 'actions',\n      headerName: '',\n      // width: 100,\n      cellClassName: 'actions',\n      getActions: ({ id }) => {\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\n\n        if (isInEditMode) {\n          return [\n            <GridActionsCellItem\n              icon={<SaveIcon />}\n              label='Save'\n              sx={{\n                color: 'primary.main',\n              }}\n              onClick={handleSaveClick(id)}\n            />,\n            <GridActionsCellItem\n              icon={<CancelIcon />}\n              label='Cancel'\n              className='textPrimary'\n              onClick={handleCancelClick(id)}\n              color='inherit'\n            />,\n          ];\n        }\n\n        return [\n          <GridActionsCellItem\n            icon={\n              <VscReplaceAll\n                size={20}\n                style={{ display: id == 0 ? 'flex' : 'none' }}\n              />\n            }\n            sx={{\n              color: 'primary.main',\n              padding: id == 0 ? '0' : '9px',\n            }}\n            label='Replace'\n            onClick={handleReplaceAll}\n          />,\n          <GridActionsCellItem\n            icon={<MdOutlineEdit size={22} />}\n            label='Edit'\n            className='textPrimary'\n            onClick={handleEditClick(id)}\n            color='inherit'\n          />,\n          <GridActionsCellItem\n            icon={<DeleteIcon />}\n            label='Delete'\n            sx={{\n              color: 'primary.main',\n            }}\n            onClick={handleDeleteClick(id)}\n            color='inherit'\n          />,\n        ];\n      },\n    },\n  ];\n\n  const handleSave = () => {\n    onSave(rowId, rows, tatValue);\n  };\n\n  useEffect(() => {\n    if (isClientChecksPrice) {\n      setTatValue(tat);\n    }\n  }, [isClientChecksPrice]);\n\n  const handleRowEditStop = (params, event) => {\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n\n  const handleEditClick = (id) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\n  };\n\n  const handleSaveClick = (id) => () => {\n    setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\n  };\n\n  const handleDeleteClick = (id) => () => {\n    setRows(rows.filter((row) => row.id !== id));\n  };\n\n  const handleCancelClick = (id) => () => {\n    setRowModesModel({\n      ...rowModesModel,\n      [id]: { mode: GridRowModes.View, ignoreModifications: true },\n    });\n\n    const editedRow = rows.find((row) => row.id === id);\n    if (editedRow.isNew) {\n      setRows(rows.filter((row) => row.id !== id));\n    }\n  };\n\n  const processRowUpdate = (newRow) => {\n    const updatedRow = { ...newRow, isNew: false };\n    // const value = newRow[columnName];\n    setRows(rows.map((row) => (row.id === newRow.id ? updatedRow : row)));\n    // if (replaceValue) {\n    //   handleReplaceAll(value);\n    // }\n    return updatedRow;\n  };\n\n  const handleRowModesModelChange = (newRowModesModel) => {\n    setRowModesModel(newRowModesModel);\n  };\n\n  const handleReplaceAll = () => {\n    const replaceData = map(rows, (data) => {\n      const otherColumns = map(\n        filter(\n          columns,\n          (data) => data?.field !== 'actions' && data?.field !== 'country'\n        ),\n        (data) => data?.field\n      );\n      const columnObject = mapValues(\n        keyBy(otherColumns),\n        (data) => rows[0][data]\n      );\n\n      return {\n        ...data,\n        ...columnObject,\n      };\n    });\n\n    setRows(replaceData);\n  };\n\n  return (\n    <Box\n      sx={{\n        height: '500px',\n        width: '100%',\n        '& .actions': {\n          color: 'text.secondary',\n        },\n        '& .textPrimary': {\n          color: 'text.primary',\n          fontSize: '10px',\n          color: 'primary.main',\n        },\n        '& .MuiDataGrid-cellContent': {\n          color: 'text.primary',\n          fontSize: '10px',\n        },\n        '& .MuiDataGrid-columnHeaderTitle': {\n          color: '#fff',\n          fontSize: '10px',\n          fontWeight: 'bold',\n        },\n        '& .MuiDataGrid-columnHeader': {\n          bgcolor: '#2152a1',\n          height: '40px',\n          minHeight: '45px',\n          padding: '0',\n        },\n        '& .MuiDataGrid-row': {\n          '&:nth-of-type(even)': {\n            backgroundColor: '#DDE1E9',\n          },\n        },\n      }}\n    >\n      {/* <DataGridToolbar /> */}\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        // pageSize={30}\n        // rowsPerPageOptions={[30, 50, 100]}\n        rowHeight={25}\n        // autoHeight={true}\n        autoPageSize\n        // getRowId={(row) => row.country}\n        slots={{\n          toolbar: () => (\n            <Toolbar variant='dense'>\n              <GridToolbar showQuickFilter></GridToolbar>\n              <div style={{ flexGrow: 1 }} />\n              {isClientChecksPrice && (\n                <label style={{ width: '11%' }}>\n                  <span style={{ fontSize: '0.8rem' }}>TAT: </span>\n                  <input\n                    type='number'\n                    value={tatValue}\n                    autoFocus\n                    style={{ width: '45%' }}\n                    onChange={(e) => setTatValue(e?.target?.value)}\n                  />\n                  {tatValue && (\n                    <span style={{ fontSize: '0.8rem' }}> days</span>\n                  )}\n                </label>\n              )}\n              <Button variant='contained' onClick={handleSave}>\n                Update Prices\n              </Button>\n            </Toolbar>\n          ),\n        }}\n        editMode='row'\n        rowModesModel={rowModesModel}\n        onRowModesModelChange={handleRowModesModelChange}\n        onRowEditStop={handleRowEditStop}\n        processRowUpdate={processRowUpdate}\n        onSelectionModelChange={handleRowModesModelChange}\n        // onCellKeyDown={(params, e) => {\n        //   setColumnName(params?.field);\n        //   setNewValue(e?.target?.value);\n        // }}\n        onProcessRowUpdateError={(error) => console.log('error', error)}\n        onEditCellChange={(params, event) => {\n          const columnName = params.field;\n          const editedValue = event.target.value;\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default EditableDataGrid;\n\n// const DataGridToolbar = () => {\n//     return (\n//         <Toolbar variant=\"dense\">\n//             <GridToolbar showQuickFilter>\n//                 {/* <button >Save Data</button> */}\n//             </GridToolbar>\n//             {/* <Typography variant=\"h6\" color=\"inherit\">\n//                 My DataGrid\n//             </Typography> */}\n//             <div style={{ flexGrow: 1 }} />\n//             {/* <IconButton edge=\"end\" color=\"inherit\"> */}\n//             {/* <Button variant=\"contained\" onClick={handleSave}>Update Prices</Button> */}\n//             {/* <AddIcon /> */}\n//             {/* </IconButton> */}\n//         </Toolbar>\n//     );\n// };\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n}), 'DeleteOutlined');\nexports.default = _default;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardHeaderUtilityClass(slot) {\n  return generateUtilityClass('MuiCardHeader', slot);\n}\nconst cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);\nexport default cardHeaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"avatar\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardHeaderClasses, { getCardHeaderUtilityClass } from './cardHeaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    avatar: ['avatar'],\n    action: ['action'],\n    content: ['content'],\n    title: ['title'],\n    subheader: ['subheader']\n  };\n  return composeClasses(slots, getCardHeaderUtilityClass, classes);\n};\nconst CardHeaderRoot = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => _extends({\n    [`& .${cardHeaderClasses.title}`]: styles.title,\n    [`& .${cardHeaderClasses.subheader}`]: styles.subheader\n  }, styles.root)\n})({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 16\n});\nconst CardHeaderAvatar = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Avatar',\n  overridesResolver: (props, styles) => styles.avatar\n})({\n  display: 'flex',\n  flex: '0 0 auto',\n  marginRight: 16\n});\nconst CardHeaderAction = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  flex: '0 0 auto',\n  alignSelf: 'flex-start',\n  marginTop: -4,\n  marginRight: -8,\n  marginBottom: -4\n});\nconst CardHeaderContent = styled('div', {\n  name: 'MuiCardHeader',\n  slot: 'Content',\n  overridesResolver: (props, styles) => styles.content\n})({\n  flex: '1 1 auto'\n});\nconst CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardHeader'\n  });\n  const {\n      action,\n      avatar,\n      className,\n      component = 'div',\n      disableTypography = false,\n      subheader: subheaderProp,\n      subheaderTypographyProps,\n      title: titleProp,\n      titleTypographyProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component,\n    disableTypography\n  });\n  const classes = useUtilityClasses(ownerState);\n  let title = titleProp;\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps, {\n      children: title\n    }));\n  }\n  let subheader = subheaderProp;\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/_jsx(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"text.secondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps, {\n      children: subheader\n    }));\n  }\n  return /*#__PURE__*/_jsxs(CardHeaderRoot, _extends({\n    className: clsx(classes.root, className),\n    as: component,\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [avatar && /*#__PURE__*/_jsx(CardHeaderAvatar, {\n      className: classes.avatar,\n      ownerState: ownerState,\n      children: avatar\n    }), /*#__PURE__*/_jsxs(CardHeaderContent, {\n      className: classes.content,\n      ownerState: ownerState,\n      children: [title, subheader]\n    }), action && /*#__PURE__*/_jsx(CardHeaderAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.node,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The content of the component.\n   */\n  title: PropTypes.node,\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default CardHeader;"],"names":["ClientChecksPriceMaster","_localStorage","navigate","useNavigate","clientCheckData","setClientCheckData","useState","expandedRow","setExpandedRow","discount","setDiscount","clientCheckRows","setClientCheckRows","rows","setRows","selectedClient","setSelectedClient","selectedPackage","setSelectedPackage","packageChecks","setPackageChecks","checksToPackage","setChecksToPackage","clientsList","setClientsList","packagePrice","setPackagePrice","isAlaCartePackage","setIsAlaCartePackage","userDetail","JSON","parse","localStorage","getItem","packagesList","setPackagesList","response","pChecks","useEffect","fetchClientData","RequestsApi","then","resp","checks","data","prices","cp","currencies","map","check","push","check_id","price","countryList","country","i","currencyList","c","_cp","length","error","console","fetchData","handleSave","id","tatValue","editedRow","find","row","tat","parseInt","includes","clientRoles","role","client_id","_jsxs","Box","sx","width","color","fontSize","fontWeight","bgcolor","children","_jsx","Card","style","display","justifyContent","alignItems","padding","ClientDropdown","handleClientChange","event","target","value","PackagesDropdown","handlePackageChange","newValue","packageDetail","package_name","isAlaCarte","FormControlLabel","control","Switch","checked","onChange","e","_e$target","_e$target2","checkList","check_fields","isEmpty","name","check_name","compact","prev","label","TextField","float","type","defaultValue","discInput","disc","discData","stringify","drow","parseFloat","placeholder","flexDirection","_event$target","Typography","isNumber","Button","onClick","handleUpdatePackage","clientName","filter","p","client_name","packagedata","active","checksdata","overall_discount","status","toastMessage","variant","height","disabled","Grid","container","spacing","item","xs","React","border","CardHeader","background","title","action","RemoveIcon","cursor","AddIcon","handleExpandRow","index","_Fragment","CardContent","EditableDataGrid","onSave","rowId","isClientChecksPrice","md","columns","sm","Checkbox","checkId","table_name","field_to_update","new_value","table_id","res","checkData","concat","updateCheck","handleCheckChange","_event$target2","_ref","_localStorage2","userClients","_userClients$","allClients","allClient","Roles","getClientList","Select","className","MenuItem","option","_ref2","inputValue","setInputValue","newOptionAdded","setnewOptionAdded","Autocomplete","freeSolo","onInputChange","handleInputChange","newInputValue","options","renderInput","params","rowModesModel","setRowModesModel","setTatValue","field","headerName","editable","flex","sortable","filterable","cellClassName","getActions","_rowModesModel$id","mode","GridRowModes","GridActionsCellItem","icon","SaveIcon","handleSaveClick","CancelIcon","handleCancelClick","VscReplaceAll","size","handleReplaceAll","MdOutlineEdit","handleEditClick","DeleteIcon","handleDeleteClick","ignoreModifications","isNew","handleRowModesModelChange","newRowModesModel","replaceData","otherColumns","columnObject","mapValues","keyBy","minHeight","backgroundColor","DataGrid","rowHeight","autoPageSize","slots","toolbar","Toolbar","GridToolbar","showQuickFilter","flexGrow","autoFocus","editMode","onRowModesModelChange","onRowEditStop","handleRowEditStop","reason","GridRowEditStopReasons","defaultMuiPrevented","processRowUpdate","newRow","updatedRow","onSelectionModelChange","onProcessRowUpdateError","log","onEditCellChange","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getCardHeaderUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardHeaderRoot","styled","overridesResolver","props","styles","_extends","cardHeaderClasses","subheader","root","CardHeaderAvatar","avatar","marginRight","CardHeaderAction","alignSelf","marginTop","marginBottom","CardHeaderContent","content","inProps","ref","useThemeProps","component","disableTypography","subheaderProp","subheaderTypographyProps","titleProp","titleTypographyProps","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","useUtilityClasses","clsx","as"],"sourceRoot":""}