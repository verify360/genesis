{"version":3,"file":"static/js/149.0baa1371.chunk.js","mappings":"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","sources":["views/MasterData/UserMaster/index.js","../node_modules/@mui/icons-material/FactCheckRounded.js"],"sourcesContent":["import RequestsApi from 'api/requests';\r\nimport { useEffect, useState } from 'react';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport FactCheckRoundedIcon from '@mui/icons-material/FactCheckRounded';\r\nimport SettingsApplicationsRoundedIcon from '@mui/icons-material/SettingsApplicationsRounded';\r\nimport {\r\n  Autocomplete,\r\n  Card,\r\n  CardContent,\r\n  Checkbox,\r\n  Chip,\r\n  CircularProgress,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n} from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Modal from '@mui/material/Modal';\r\nimport Switch from '@mui/material/Switch';\r\nimport { DataGrid, GridActionsCellItem, GridToolbar } from '@mui/x-data-grid';\r\nimport { Field, FormikProvider, useFormik } from 'formik';\r\nimport {\r\n  concat,\r\n  filter,\r\n  find,\r\n  flatMap,\r\n  flatMapDeep,\r\n  get,\r\n  includes,\r\n  intersectionWith,\r\n  isArray,\r\n  isEmpty,\r\n  isEqual,\r\n  isObject,\r\n  map,\r\n  omit,\r\n  unionBy,\r\n} from 'lodash';\r\nimport {\r\n  Roles,\r\n  adminRoles,\r\n  clientRoles,\r\n  handleTextTranform,\r\n  toastMessage,\r\n} from 'views/Utils/Common';\r\nimport * as Yup from 'yup';\r\nimport '../Style.css';\r\nimport { useNavigate } from 'react-router';\r\n\r\nexport default function UserMaster() {\r\n  const role = localStorage?.getItem('role');\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [columns, setColumns] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [func, setFunc] = useState('user');\r\n  const [selectedId, setSelectedId] = useState(0);\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n  const navigate = useNavigate();\r\n  const handleClose = () => {\r\n    setSelectedId(0);\r\n    setOpen(false);\r\n  };\r\n\r\n  let response = [];\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      response = await RequestsApi.ListUsers();\r\n      if (response?.status === 200) {\r\n        let resData = JSON?.parse(response.data.data);\r\n        setRows(resData);\r\n        let colData = [];\r\n        let reskeys = resData.keys();\r\n\r\n        let colWidth = 950 / (Object.keys(resData[0]).length - 1);\r\n        Object.keys(resData[0]).map((key, index) => {\r\n          if (key === 'jwt_auth_active') {\r\n            colData.push({\r\n              field: key,\r\n              headerName: 'ACTIVE',\r\n              flex: 1,\r\n              renderCell: (params) => {\r\n                return (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        color='primary'\r\n                        defaultChecked={params.value}\r\n                        disabled={role === Roles?.SUPERVISOR}\r\n                      />\r\n                    }\r\n                    size='small'\r\n                    onChange={(event) => handleSwitchChange(event, params.id)}\r\n                  />\r\n                );\r\n              },\r\n            });\r\n          } else if (key === 'checks') {\r\n            colData.push({\r\n              field: key,\r\n              headerName: 'CLIENT CHECKS',\r\n              flex: 1,\r\n              renderCell: (params) => {\r\n                return (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <IconButton\r\n                        type='submit'\r\n                        color='primary'\r\n                        variant='contained'\r\n                        onClick={handleEditClick(\r\n                          params.id,\r\n                          params.client,\r\n                          'checks',\r\n                          params?.row?.role\r\n                        )}\r\n                      >\r\n                        <FactCheckRoundedIcon />\r\n                      </IconButton>\r\n                    }\r\n                    size='small'\r\n                  />\r\n                );\r\n              },\r\n            });\r\n          }\r\n          // else if (\r\n          //   key === 'terms' &&\r\n          //   !includes(clientRoles, userDetail?.role)\r\n          // ) {\r\n          //   colData.push({\r\n          //     field: key,\r\n          //     headerName: 'TERMS',\r\n          //     flex: 1,\r\n          //     renderCell: (params) => {\r\n          //       return (\r\n          //         <FormControlLabel\r\n          //           control={\r\n          //             <IconButton\r\n          //               type='submit'\r\n          //               color='primary'\r\n          //               variant='contained'\r\n          //               onClick={handleEditClick(\r\n          //                 params.id,\r\n          //                 params.terms,\r\n          //                 'terms'\r\n          //               )}\r\n          //             >\r\n          //               <SettingsApplicationsRoundedIcon\r\n          //                 sx={{\r\n          //                   display: includes(clientRoles, userDetail?.role)\r\n          //                     ? 'none'\r\n          //                     : 'block',\r\n          //                 }}\r\n          //               />\r\n          //             </IconButton>\r\n          //           }\r\n          //           size='small'\r\n          //         />\r\n          //       );\r\n          //     },\r\n          //   });\r\n          // }\r\n          else if (key === 'username' || key === 'email' || key === 'role')\r\n            colData.push({\r\n              field: key,\r\n              headerName: key.replaceAll('_', ' ').toUpperCase(),\r\n              editable: false,\r\n              flex: 1,\r\n              width: colWidth,\r\n            });\r\n        });\r\n        role !== Roles?.SUPERVISOR &&\r\n          colData.push({\r\n            field: 'actions',\r\n            type: 'actions',\r\n            headerName: 'Actions',\r\n            width: 100,\r\n            cellClassName: 'actions',\r\n            getActions: ({ id }) => {\r\n              return [\r\n                <GridActionsCellItem\r\n                  color='inherit'\r\n                  icon={<EditIcon color='primary'/>}\r\n                  label='Edit'\r\n                  className='textPrimary'\r\n                  onClick={handleEditClick(id, '', 'user')}\r\n                />,\r\n              ];\r\n            },\r\n          });\r\n        setColumns(colData);\r\n      } else {\r\n        console.error('Unexpected response status:', response?.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleSwitchChange = (event, id) => {\r\n    let upddata = {\r\n      table_name: 'users',\r\n      field_to_update: 'jwt_auth_active',\r\n      new_value: event.target.checked,\r\n      table_id: id,\r\n    };\r\n\r\n    try {\r\n      let response = RequestsApi.UpdateData(upddata);\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (id, data, func, role) => () => {\r\n    if (role === 'vendor') {\r\n      navigate(`/master/vendorcheckprices/${id}`);\r\n    } else {\r\n      setSelectedId(id);\r\n      setFunc(func);\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 0.5,\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: '#fff',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeader': {\r\n          bgcolor: '#2152a1',\r\n        },\r\n        '& .MuiDataGrid-row': {\r\n          '&:nth-of-type(even)': {\r\n            backgroundColor: '#DDE1E9',\r\n          },\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitleContainer': {\r\n          justifyContent: 'flex-start',\r\n        },\r\n        '& .MuiDataGrid-cell--textLeft': {\r\n          justifyContent: 'flex-start !important', \r\n        },\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Button\r\n          color='primary'\r\n          style={{ display: role === Roles?.SUPERVISOR ? 'none' : 'flex' }}\r\n          startIcon={<AddIcon />}\r\n          onClick={handleEditClick('', '', 'user')}\r\n          variant='contained'\r\n        >\r\n          Add User\r\n        </Button>\r\n      </Box>\r\n      {loading ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n          <CircularProgress color='inherit' size={20} />\r\n        </div>\r\n      ) : (\r\n        <DataGrid\r\n          rows={\r\n            includes(clientRoles, userDetail?.role)\r\n              ? filter(\r\n                  rows,\r\n                  (data) => data?.client_id === userDetail?.client_id\r\n                )\r\n              : rows\r\n          }\r\n          rowHeight={38}\r\n          columns={columns}\r\n          disableRowSelectionOnClick\r\n          slots={{\r\n            toolbar: GridToolbar,\r\n          }}\r\n          getRowClassName={(params) =>\r\n            params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n          }\r\n        />\r\n      )}\r\n\r\n      {/* Modal component... */}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby='modal-modal-title'\r\n        aria-describedby='modal-modal-description'\r\n      >\r\n        <Box\r\n          sx={{\r\n            maxHeight: '32rem',\r\n            overflow: 'scroll',\r\n            overflowY: 'auto',\r\n            position: 'absolute',\r\n            maxHeight: '32rem',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            width: 700,\r\n            bgcolor: 'background.paper',\r\n            border: '2px solid #000',\r\n            boxShadow: 24,\r\n            p: 4,\r\n            '& label': {\r\n              lineHeight: '2em !important',\r\n            },\r\n          }}\r\n        >\r\n          {/*conditional rendering of forms based on 'func' */}\r\n          {func === 'user' && (\r\n            <AddEditForm\r\n              id={selectedId}\r\n              rows={rows}\r\n              handleClose={handleClose}\r\n              fetchData={fetchData}\r\n            />\r\n          )}\r\n\r\n          {func === 'checks' && (\r\n            <AddClientsToUser\r\n              id={selectedId}\r\n              userclientsrows={rows}\r\n              handleClose={handleClose}\r\n              fetchData={fetchData}\r\n            />\r\n          )}\r\n\r\n          {func === 'terms' && (\r\n            <AddTermsToUser\r\n              id={selectedId}\r\n              termsrows={rows}\r\n              handleClose={handleClose}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  username: Yup.string().required('Required'),\r\n  email: Yup.string().required('Required'),\r\n  role: Yup.string().required('Required'),\r\n});\r\n\r\nfunction AddEditForm({ id, rows, handleClose, fetchData = () => {} }) {\r\n  const [clients, setClients] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [selectedClients, setSelectedClients] = useState([]);\r\n  const [allClient, setAllClients] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const dataRows = rows;\r\n  const userDetail = JSON.parse(localStorage?.getItem('user'));\r\n  const eRow = rows.filter((row) => row.id === id)[0];\r\n  const clientList = eRow?.clients ? JSON.parse(eRow?.clients) : null;\r\n\r\n  let response = [];\r\n\r\n  const menuBox = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: 200,\r\n        width: 160,\r\n      },\r\n    },\r\n    anchorOrigin: {\r\n      vertical: 'bottom',\r\n      horizontal: 'left',\r\n    },\r\n    transformOrigin: {\r\n      vertical: 'top',\r\n      horizontal: 'left',\r\n    },\r\n    getContentAnchorEl: null,\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await RequestsApi.ListClients();\r\n        let resData = JSON.parse(response.data.data);\r\n        setClients(resData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (clientList) {\r\n      const allClients = clientList[0]?.allClient || clientList?.allClient;\r\n      if (allClients) {\r\n        setAllClients(true);\r\n      } else {\r\n        setSelectedClients(clientList);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  function addClient(data) {\r\n    if (!error) {\r\n      try {\r\n        let response = RequestsApi.mUsers({\r\n          data: data,\r\n        });\r\n\r\n        response?.then((res) => {\r\n          if (res?.status === 200) {\r\n            id\r\n              ? toastMessage('User updated successfully')\r\n              : toastMessage('User added successfully');\r\n            handleClose();\r\n            fetchData();\r\n          }\r\n        });\r\n        if (response.data && response.data.success === false) {\r\n          toastMessage(response.data.msg, 'error');\r\n          return setError(response.data.msg);\r\n        }\r\n      } catch (err) {\r\n        if (err.response) {\r\n          toastMessage(err.response.data.msg, 'error');\r\n          return setError(err.response.data.msg);\r\n        }\r\n        return setError('There has been an error.');\r\n      }\r\n    }\r\n  }\r\n\r\n  const InputStyle = {\r\n    width: '300px',\r\n    marginBottom: '15px',\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: eRow || {\r\n      username: '',\r\n      clients: '',\r\n      email: '',\r\n      role: '',\r\n      password: 'Password@321',\r\n      jwt_auth_active: true,\r\n      support: false,\r\n      client_name: '',\r\n      client_id: includes(clientRoles, userDetail?.role)\r\n        ? get(userDetail, 'client_id', '')\r\n        : '',\r\n    },\r\n    validationSchema,\r\n    onSubmit: (data) => {\r\n      const values = {\r\n        ...data,\r\n        clients:\r\n          isEmpty(selectedClients) && allClient\r\n            ? JSON?.stringify([{ allClient: true }])\r\n            : JSON.stringify(selectedClients),\r\n        checks:\r\n          data?.role !== Roles?.VENDOR\r\n            ? eRow?.checks\r\n              ? eRow?.checks\r\n              : JSON.stringify({ allChecks: true })\r\n            : null,\r\n      };\r\n      alert(JSON.stringify(values, null, 2));\r\n      const newRows = dataRows.map((obj) => {\r\n        if (obj.id === values.id) {\r\n          return values;\r\n        }\r\n\r\n        return obj;\r\n      });\r\n\r\n      values.client_id = allClient\r\n        ? find(clients, { client_type: 'admin' })?.id\r\n        : values?.client_id;\r\n      values.password = values.id !== '' ? 'Password@321' : values.password;\r\n      values.client_name = find(clients, { id: values?.client_id })\r\n        ? find(clients, { id: values?.client_id })?.client_name\r\n        : '';\r\n      const bodyData = id ? omit(values, 'password') : values;\r\n      addClient(bodyData);\r\n    },\r\n  });\r\n\r\n  rows = rows.filter((row) => row.id !== id);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n          <CircularProgress color='inherit' size={20} />\r\n        </div>\r\n      ) : (\r\n        <FormikProvider value={formik}>\r\n          <h2>{id ? 'Edit' : 'Add'} User</h2>\r\n          <hr />\r\n          <p></p>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={6}>\r\n                <p></p>\r\n                {!includes(clientRoles, userDetail?.role) && (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        defaultChecked={formik.values.support || false}\r\n                        onChange={(e) => {\r\n                          formik?.setFieldValue('support', e?.target?.checked);\r\n                          e?.target?.checked\r\n                            ? formik?.setFieldValue(\r\n                                'client_id',\r\n                                find(clients, { client_type: 'admin' })?.id\r\n                              )\r\n                            : formik?.setFieldValue('client_name', '');\r\n                        }}\r\n                        color='primary'\r\n                      />\r\n                    }\r\n                    label='Internal Support'\r\n                    name='support'\r\n                  />\r\n                )}\r\n                <Field\r\n                  as={TextField}\r\n                  style={{ ...InputStyle }}\r\n                  name='username'\r\n                  label='User Name'\r\n                  fullWidth\r\n                  onChange={(e) =>\r\n                    formik?.setFieldValue(\r\n                      'username',\r\n                      handleTextTranform(e?.target?.value)\r\n                    )\r\n                  }\r\n                  value={formik.values.username || ''}\r\n                  error={\r\n                    formik.touched.username && Boolean(formik.errors.username)\r\n                  }\r\n                  helperText={formik.touched.username && formik.errors.username}\r\n                />\r\n                <Field\r\n                  as={TextField}\r\n                  style={{ ...InputStyle }}\r\n                  name='email'\r\n                  label='Email'\r\n                  fullWidth\r\n                  onChange={formik.handleChange}\r\n                  value={formik.values.email}\r\n                  error={formik.touched.email && Boolean(formik.errors.email)}\r\n                  helperText={formik.touched.email && formik.errors.email}\r\n                />\r\n                <FormControl fullWidth>\r\n                  <InputLabel id='select-label'>Select Role</InputLabel>\r\n                  <Select\r\n                    id='role'\r\n                    name='role'\r\n                    style={{ ...InputStyle }}\r\n                    fontSize='sm'\r\n                    fullWidth\r\n                    label='Role'\r\n                    width='250px'\r\n                    variant='outlined'\r\n                    onChange={(e) => {\r\n                      e?.target?.value === Roles?.ADMIN\r\n                        ? setAllClients(true)\r\n                        : setAllClients(false);\r\n                      formik?.setFieldValue('role', e?.target?.value);\r\n                    }}\r\n                    value={formik.values.role || ''}\r\n                    error={formik.touched.role && Boolean(formik.errors.role)}\r\n                  >\r\n                    <MenuItem value=''>Select Role</MenuItem>\r\n                    {formik.values.support\r\n                      ? adminRoles.map((option, i) => (\r\n                          <MenuItem value={option} key={i}>\r\n                            {option.toUpperCase()}\r\n                          </MenuItem>\r\n                        ))\r\n                      : clientRoles.map((option, i) => (\r\n                          <MenuItem value={option} key={i}>\r\n                            {option.toUpperCase()}\r\n                          </MenuItem>\r\n                        ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      color='primary'\r\n                      defaultChecked={formik.values.jwt_auth_active || true}\r\n                    />\r\n                  }\r\n                  label='Active'\r\n                  name='jwt_auth_active'\r\n                />\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <p></p>\r\n                {formik?.values?.support && (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        disabled={!isEmpty(selectedClients)}\r\n                        checked={allClient}\r\n                        onChange={(e) => {\r\n                          setAllClients(e?.target?.checked);\r\n                          if (e?.target?.checked) {\r\n                            formik?.setFieldValue(\r\n                              'client_id',\r\n                              find(clients, { client_type: 'admin' })?.id\r\n                            );\r\n                            setSelectedClients([]);\r\n                          }\r\n                        }}\r\n                        color='primary'\r\n                      />\r\n                    }\r\n                    label='Include all clients'\r\n                  />\r\n                )}\r\n                <FormControl fullWidth>\r\n                  <Autocomplete\r\n                    sx={{\r\n                      border:\r\n                        error && isEmpty(selectedClients) && !allClient\r\n                          ? '1px solid #ff6a46'\r\n                          : 'none',\r\n                      marginTop: !formik?.values?.support ? '2.3rem' : '0px',\r\n                    }}\r\n                    onChange={(event, clientObj) => {\r\n                      setSelectedClients(\r\n                        unionBy(concat(selectedClients, clientObj), 'id')\r\n                      );\r\n                      formik?.setFieldValue('client_id', clientObj?.[0]?.id);\r\n                    }}\r\n                    multiple\r\n                    value={selectedClients}\r\n                    options={clients}\r\n                    getOptionLabel={(option) => option?.client_name}\r\n                    disabled={allClient}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label='Select Client'\r\n                        variant='outlined'\r\n                      />\r\n                    )}\r\n                    renderTags={(value) =>\r\n                      map(unionBy(flatMapDeep(value), 'id'), (data, index) => (\r\n                        <Chip\r\n                          label={data?.client_name}\r\n                          key={index}\r\n                          onDelete={() =>\r\n                            setSelectedClients(\r\n                              filter(\r\n                                selectedClients,\r\n                                (obj) => obj?.id !== data?.id\r\n                              )\r\n                            )\r\n                          }\r\n                        />\r\n                      ))\r\n                    }\r\n                  />\r\n                  {error && isEmpty(selectedClients) && !allClient && (\r\n                    <span style={{ color: 'red', fontSize: '0.68rem' }}>\r\n                      Required\r\n                    </span>\r\n                  )}\r\n                </FormControl>\r\n                <p></p>\r\n                <FormControl fullWidth>\r\n                  <InputLabel id='select-label'>\r\n                    Select Default Client\r\n                  </InputLabel>\r\n                  <Select\r\n                    id='client_id'\r\n                    name='client_id'\r\n                    style={{ ...InputStyle }}\r\n                    fontSize='sm'\r\n                    fullWidth\r\n                    label='Parent Client'\r\n                    width='250px'\r\n                    variant='outlined'\r\n                    disabled={\r\n                      allClient || includes(clientRoles, userDetail?.role)\r\n                    }\r\n                    onChange={(e) => {\r\n                      formik?.setFieldValue('client_id', e?.target?.value);\r\n                    }}\r\n                    value={formik.values.client_id || ''}\r\n                    error={\r\n                      formik.touched.client_id &&\r\n                      Boolean(formik.errors.client_id)\r\n                    }\r\n                    MenuProps={menuBox}\r\n                  >\r\n                    {allClient ? (\r\n                      <MenuItem\r\n                        selected\r\n                        value={find(clients, { client_type: 'admin' })?.id}\r\n                      >\r\n                        {find(clients, { client_type: 'admin' })?.client_name}\r\n                      </MenuItem>\r\n                    ) : (\r\n                      selectedClients?.map((option, i) => (\r\n                        <MenuItem value={option.id} key={i}>\r\n                          {option?.client_name}\r\n                        </MenuItem>\r\n                      ))\r\n                    )}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type='submit'\r\n              color='primary'\r\n              variant='contained'\r\n              onClick={() =>\r\n                isEmpty(selectedClients) && !allClient\r\n                  ? setError(true)\r\n                  : setError(false)\r\n              }\r\n            >\r\n              Submit\r\n            </Button>\r\n          </form>\r\n        </FormikProvider>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction AddClientsToUser({\r\n  id,\r\n  userclientsrows = [],\r\n  handleClose,\r\n  fetchData = () => {},\r\n}) {\r\n  // const [userId, setUserId] = useState(id);\r\n  const role = localStorage?.getItem('role');\r\n  const [clients, setClients] = useState([]);\r\n  const [selectedClients, setSelectedClients] = useState([]);\r\n  const [clientChecks, setClientChecks] = useState([]);\r\n  const [clientOrderCheck, setClientOrderCheck] = useState(true);\r\n  const [selectedChecks, setSelectedChecks] = useState([]);\r\n  const [checksArray, setChecksArray] = useState([]);\r\n  let userclients = JSON.parse(\r\n    userclientsrows.filter((row) => row.id === id)[0]?.clients\r\n  );\r\n\r\n  let userChecks = JSON.parse(\r\n    userclientsrows.filter((row) => row.id === id)[0]?.checks\r\n  );\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let response = [];\r\n      response = RequestsApi.ListClients();\r\n      response.then((resp) => {\r\n        let resData = JSON.parse(resp.data.data);\r\n\r\n        if (userclients && userclients.length > 0) {\r\n          if (userclients[0]?.allClient) {\r\n            setSelectedClients(resData);\r\n          } else {\r\n            setSelectedClients(userclients);\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }, []);\r\n\r\n  const getClientChecksById = (event, clientObj) => {\r\n    const id = clientObj?.id;\r\n    try {\r\n      let response = RequestsApi.getClientChecks(id);\r\n      response.then((res) => {\r\n        const clientData = res?.data?.data ? JSON.parse(res?.data?.data) : '';\r\n        const clientName =\r\n          find(clients, { id: id })?.client_name ||\r\n          find(userclients, { id: id })?.client_name;\r\n        if (res?.status === 200) {\r\n          const data = map(filter(clientData, { active: true }), (data) => {\r\n            return {\r\n              client_name: clientName,\r\n              check_name: data?.check_name,\r\n              check_id: data?.check_id,\r\n              id: data?.client_id,\r\n            };\r\n          });\r\n          setClientChecks(unionBy(data, 'check_id'));\r\n          const comparator = (obj1, obj2) =>\r\n            obj1.check_id === obj2.check_id &&\r\n            obj1.client_name === obj2.client_name;\r\n          setSelectedChecks(\r\n            flatMap([\r\n              ...selectedChecks,\r\n              intersectionWith(data, userChecks, comparator),\r\n            ])\r\n          );\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isEmpty(userChecks) && isObject(userChecks) && userChecks?.allChecks) {\r\n      setClientOrderCheck(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !isEmpty(userclients) &&\r\n      !userclients[0]?.allClient &&\r\n      !isEmpty(userChecks) &&\r\n      isArray(userChecks) &&\r\n      !userChecks?.allChecks\r\n    ) {\r\n      getClientChecksById(\r\n        '',\r\n        find(userclients, (data) => data?.id)\r\n      );\r\n      setClientOrderCheck(false);\r\n      setChecksArray(userChecks);\r\n    }\r\n  }, []);\r\n\r\n  const handleAddClientsToUser = () => {\r\n    let data = {\r\n      table_name: 'users',\r\n      field_to_update: 'checks',\r\n      new_value: clientOrderCheck\r\n        ? JSON.stringify({ allChecks: true })\r\n        : JSON.stringify(checksArray),\r\n      table_id: id,\r\n    };\r\n\r\n    try {\r\n      let response = RequestsApi.UpdateData(data);\r\n      response?.then((res) => {\r\n        if (res?.status === 200) {\r\n          toastMessage('Terms updated successfully');\r\n          handleClose();\r\n          fetchData();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (checkDetail) => {\r\n    const isChecked = selectedChecks.includes(checkDetail);\r\n    const checked = filter(checksArray, checkDetail);\r\n\r\n    setSelectedChecks((prevSelectedChecks) => {\r\n      if (isChecked) {\r\n        // If already selected, remove from the array\r\n        return prevSelectedChecks.filter((item) => item !== checkDetail);\r\n      } else {\r\n        // If not selected, add to the array\r\n\r\n        return [...prevSelectedChecks, checkDetail];\r\n      }\r\n    });\r\n    setChecksArray((prevSelectedChecks) => {\r\n      if (!isEmpty(checked)) {\r\n        return prevSelectedChecks.filter((item) => !isEqual(item, checked[0]));\r\n      } else {\r\n        return [...prevSelectedChecks, checkDetail];\r\n      }\r\n    });\r\n  };\r\n\r\n  const tableCellStyle = {\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '0.68rem',\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 3,\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeaders': {\r\n          bgcolor: '#a8d6f8',\r\n        },\r\n      }}\r\n    >\r\n      <h2>Manage User Checks</h2>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid item md={12} spacing={1} sx={{ display: 'flex' }}>\r\n          <Grid item md={4.5}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  variant='outlined'\r\n                  checked={clientOrderCheck}\r\n                  onChange={(e) => setClientOrderCheck(e?.target?.checked)}\r\n                  color='primary'\r\n                  sx={{ width: '54px' }}\r\n                />\r\n              }\r\n              label='Include all client checks ?'\r\n            />\r\n          </Grid>\r\n          <Grid item md={7}>\r\n            {!clientOrderCheck && (\r\n              <Autocomplete\r\n                defaultValue={userclients.find((data) => data?.client_name)}\r\n                onChange={(event, clientObj) => {\r\n                  getClientChecksById(event, clientObj);\r\n                  setClientOrderCheck(false);\r\n                }}\r\n                options={selectedClients}\r\n                getOptionLabel={(option) => option.client_name}\r\n                disabled={clientOrderCheck}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label='Search...'\r\n                    variant='outlined'\r\n                    sx={{ padding: '8px !important' }}\r\n                  />\r\n                )}\r\n              />\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={2} sx={{ paddingLeft: 2.5, paddingTop: 1 }}>\r\n          {[...Array(3)].map((_, columnIndex) => {\r\n            const columnItems = clientChecks.filter(\r\n              (_, index) => index % 3 === columnIndex\r\n            );\r\n            return (\r\n              <Grid item md={4} key={columnIndex}>\r\n                {columnItems.map((checkDetail, index) => (\r\n                  <div key={index}>\r\n                    <Checkbox\r\n                      variant='outlined'\r\n                      checked={selectedChecks.includes(checkDetail)}\r\n                      onChange={() => handleCheckboxChange(checkDetail)}\r\n                    />\r\n                    <span>{checkDetail.check_name}</span>\r\n                  </div>\r\n                ))}\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <Grid md={12} pt={4}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\r\n            <Button onClick={handleClose} variant='contained'>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleAddClientsToUser}\r\n              variant='contained'\r\n              disabled={role === Roles?.SUPERVISOR}\r\n            >\r\n              Update Checks\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n        <Grid md={12} sx={{ paddingTop: '1rem' }}>\r\n          {!isEmpty(checksArray) && (\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell style={{ ...tableCellStyle }}>No.</TableCell>\r\n                  <TableCell style={{ ...tableCellStyle }}>\r\n                    ClientName\r\n                  </TableCell>\r\n                  <TableCell style={{ ...tableCellStyle }}>CheckName</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {map(checksArray, (data, index) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell style={{ ...tableCellStyle }}>\r\n                        {index + 1}\r\n                      </TableCell>\r\n                      <TableCell style={{ ...tableCellStyle }}>\r\n                        {data?.client_name}\r\n                      </TableCell>\r\n                      <TableCell style={{ ...tableCellStyle }}>\r\n                        {data?.check_name}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction AddChecksToUser({ id, userchecksrows, handleClose }) {\r\n  const [checks, setChecks] = useState([]);\r\n  const [selectedChecks, setSelectedChecks] = useState([]);\r\n  const [selectAll, setSelectAll] = useState(false);\r\n\r\n  let response = [];\r\n  let userchecks = JSON.parse(\r\n    userchecksrows.filter((row) => row.id === id)[0].checks\r\n  );\r\n\r\n  useEffect(() => {\r\n    try {\r\n      response = RequestsApi.ListChecks();\r\n      response.then((resp) => {\r\n        let resData = resp.data.data;\r\n        setChecks(JSON.parse(resData));\r\n\r\n        if (userchecks && userchecks.length) {\r\n          userchecks.map((row) => {\r\n            setSelectedChecks((prev) => [...prev, row]);\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }, []);\r\n\r\n  const handleSelectAll = (event) => {\r\n    setSelectAll(event.target.checked);\r\n\r\n    if (event.target.checked) {\r\n      setSelectedChecks(checks);\r\n    } else {\r\n      setSelectedChecks([]);\r\n    }\r\n  };\r\n\r\n  const generateIsChecked = (row) => {\r\n    let matched = false;\r\n\r\n    if (selectedChecks && selectedChecks.length) {\r\n      selectedChecks.map((obj1) => {\r\n        if (obj1.id === row.id) {\r\n          matched = true;\r\n        }\r\n      });\r\n    }\r\n    return matched;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      field: 'isChecked',\r\n      headerName: 'Select',\r\n      sortable: false,\r\n      width: 100,\r\n      renderHeader: () => (\r\n        <Checkbox checked={selectAll} onChange={handleSelectAll} />\r\n      ),\r\n      renderCell: (params) => (\r\n        <Checkbox\r\n          checked={generateIsChecked(params.row)}\r\n          onChange={(event) => handleConfirmChange(event, params.row)}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      field: 'check_name',\r\n      headerName: 'Check Name',\r\n      width: 300,\r\n    },\r\n  ];\r\n\r\n  function handleConfirmChange(e, clickedRow) {\r\n    if (e.target.checked) {\r\n      setSelectedChecks((prev) => [...prev, clickedRow]);\r\n    } else {\r\n      setSelectedChecks((prev) =>\r\n        prev.filter((check) => check.id !== clickedRow.id)\r\n      );\r\n    }\r\n  }\r\n\r\n  const handleAddChecksToUser = () => {\r\n    let data = {\r\n      table_name: 'users',\r\n      field_to_update: 'checks',\r\n      new_value: JSON.stringify(selectedChecks),\r\n      table_id: id,\r\n    };\r\n\r\n    try {\r\n      let response = RequestsApi.UpdateData(data);\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeaders': {\r\n          bgcolor: '#a8d6f8',\r\n        },\r\n      }}\r\n    >\r\n      <h2>Manage User Checks</h2>\r\n      <p></p>\r\n\r\n      <DataGrid rows={checks} columns={columns} density='compact' />\r\n\r\n      <Button onClick={handleAddChecksToUser} variant='contained'>\r\n        Add Checks\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction AddTermsToUser({ id, termsrows, handleClose }) {\r\n  const [siteTerms, setSiteTerms] = useState([]);\r\n  const [selectedTerms, setSelectedTerms] = useState([]);\r\n\r\n  let response = [];\r\n\r\n  useEffect(() => {\r\n    try {\r\n      let userterms = '';\r\n\r\n      if (Array.isArray(termsrows)) {\r\n        const foundRow = termsrows.find((row) => row.id === id);\r\n        userterms = foundRow?.terms || '';\r\n      }\r\n\r\n      if (userterms) {\r\n        setSelectedTerms(JSON.parse(userterms));\r\n      }\r\n\r\n      response = RequestsApi.ListUserTerms('user');\r\n      response.then((resp) => {\r\n        let resData = JSON.parse(resp.data.data);\r\n        setSiteTerms(resData);\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }, []);\r\n\r\n  const handleCheckChange = (event, termsDetail) => {\r\n    if (event.target.checked) {\r\n      if (Array.isArray(selectedTerms)) {\r\n        let term = selectedTerms.filter((term) => term.id === termsDetail?.id);\r\n        if (term.length) {\r\n          term.term_value = event.target.checked;\r\n        } else {\r\n          setSelectedTerms((prev) => [\r\n            ...prev,\r\n            { ...termsDetail, term_value: event.target.checked },\r\n          ]);\r\n        }\r\n      } else {\r\n        setSelectedTerms((prev) => [\r\n          ...prev,\r\n          { ...termsDetail, term_value: event.target.checked },\r\n        ]);\r\n      }\r\n    } else {\r\n      setSelectedTerms((prev) =>\r\n        prev.filter((term) => term.id !== termsDetail?.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChange = (event, term_name) => {\r\n    try {\r\n      if (event.target.value) {\r\n        if (Array.isArray(selectedTerms)) {\r\n          let term = selectedTerms.filter(\r\n            (term) => term.term_name === term_name\r\n          );\r\n          if (term.length) {\r\n            term.term_value = event.target.value;\r\n          } else {\r\n            setSelectedTerms((prev) => [\r\n              ...prev,\r\n              { term_name: term_name, term_value: event.target.value },\r\n            ]);\r\n          }\r\n        } else {\r\n          setSelectedTerms((prev) => [\r\n            ...prev,\r\n            { term_name: term_name, term_value: event.target.value },\r\n          ]);\r\n        }\r\n      } else {\r\n        setSelectedTerms((prev) =>\r\n          Array.isArray(prev)\r\n            ? prev.filter((term) => term.term_name !== term_name)\r\n            : prev\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const userData = find(termsrows, { id: id });\r\n    if (userData?.terms) {\r\n      const userTermsList = JSON?.parse(userData?.terms);\r\n      setSelectedTerms(userTermsList);\r\n    }\r\n  }, []);\r\n\r\n  const handleAddTermsToUser = () => {\r\n    let data = {\r\n      table_name: 'users',\r\n      field_to_update: 'terms',\r\n      new_value: JSON.stringify(selectedTerms),\r\n      table_id: id,\r\n    };\r\n\r\n    try {\r\n      let response = RequestsApi.UpdateData(data);\r\n      response.then((res) => {\r\n        if (res.status === 200) {\r\n          toastMessage('User terms updated successfully');\r\n          handleClose();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  };\r\n\r\n  function getUserTermValue(termId) {\r\n    try {\r\n      if (Array.isArray(selectedTerms)) {\r\n        let term = selectedTerms.find((t) => t.id == termId);\r\n        if (term) return term.term_value;\r\n        else return false;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating record :', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        width: '100%',\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-cellContent': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n        },\r\n        '& .MuiDataGrid-columnHeaderTitle': {\r\n          color: 'text.primary',\r\n          fontSize: '10px',\r\n          fontWeight: 'bold',\r\n        },\r\n        '& .MuiDataGrid-columnHeaders': {\r\n          bgcolor: '#a8d6f8',\r\n        },\r\n      }}\r\n    >\r\n      <h2>Manage User Terms</h2>\r\n      <p></p>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\r\n      >\r\n        <Card>\r\n          <CardContent>\r\n            {siteTerms.map((term) => (\r\n              <Box\r\n                key={term.id}\r\n                display='flex'\r\n                justifyContent='space-between'\r\n                alignItems='center'\r\n              >\r\n                {`${term.term_text} (${term.term_type}) - ${term.term_value}`}\r\n                {term.term_type === 'boolean' ||\r\n                term.term_type === 'hide/show' ? (\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={getUserTermValue(term.id)}\r\n                        onChange={(event) => handleCheckChange(event, term)}\r\n                      />\r\n                    }\r\n                    label={term.term_type === 'hide/show' ? 'Show' : 'Yes'}\r\n                  ></FormControlLabel>\r\n                ) : (\r\n                  <TextField\r\n                    label='Term Value'\r\n                    name='term_value'\r\n                    defaultValue={\r\n                      getUserTermValue(term.term_name) || term.term_value\r\n                    }\r\n                    onChange={(event) => handleChange(event, term.term_name)}\r\n                    margin='normal'\r\n                  />\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>\r\n          <Button onClick={handleClose} variant='contained'>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAddTermsToUser} variant='contained'>\r\n            Update Terms\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M20 3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H6c-.55 0-1-.45-1-1s.45-1 1-1h3c.55 0 1 .45 1 1s-.45 1-1 1zm0-4H6c-.55 0-1-.45-1-1s.45-1 1-1h3c.55 0 1 .45 1 1s-.45 1-1 1zm0-4H6c-.55 0-1-.45-1-1s.45-1 1-1h3c.55 0 1 .45 1 1s-.45 1-1 1zm9.7 2.12-3.17 3.17c-.39.39-1.03.39-1.42 0l-1.41-1.42a.9959.9959 0 0 1 0-1.41c.39-.39 1.02-.39 1.41 0l.71.71 2.47-2.47c.39-.39 1.02-.39 1.41 0l.01.01c.38.39.38 1.03-.01 1.41z\"\n}), 'FactCheckRounded');\nexports.default = _default;"],"names":["UserMaster","_localStorage","_localStorage2","role","localStorage","getItem","open","setOpen","useState","loading","setLoading","columns","setColumns","rows","setRows","func","setFunc","selectedId","setSelectedId","userDetail","JSON","parse","navigate","useNavigate","handleClose","response","fetchData","async","_response","RequestsApi","status","resData","data","colData","colWidth","keys","Object","length","map","key","index","push","field","headerName","flex","renderCell","params","_jsx","FormControlLabel","control","Switch","color","defaultChecked","value","disabled","Roles","size","onChange","event","handleSwitchChange","id","_params$row","IconButton","type","variant","onClick","handleEditClick","client","row","children","FactCheckRoundedIcon","replaceAll","toUpperCase","editable","width","cellClassName","getActions","_ref","GridActionsCellItem","icon","EditIcon","label","className","_response2","console","error","useEffect","upddata","table_name","field_to_update","new_value","target","checked","table_id","concat","_jsxs","Box","sx","display","flexDirection","gap","fontSize","fontWeight","bgcolor","backgroundColor","justifyContent","Button","style","startIcon","AddIcon","CircularProgress","DataGrid","includes","clientRoles","filter","client_id","rowHeight","disableRowSelectionOnClick","slots","toolbar","GridToolbar","getRowClassName","indexRelativeToCurrentPage","Modal","onClose","maxHeight","overflow","overflowY","position","top","left","transform","border","boxShadow","p","lineHeight","AddEditForm","AddClientsToUser","userclientsrows","AddTermsToUser","termsrows","validationSchema","Yup","shape","username","required","email","_ref2","_localStorage3","_formik$values","_formik$values2","_find5","_find6","clients","setClients","setError","selectedClients","setSelectedClients","allClient","setAllClients","isLoading","setIsLoading","dataRows","eRow","clientList","_clientList$","InputStyle","marginBottom","formik","useFormik","initialValues","password","jwt_auth_active","support","client_name","get","onSubmit","_find","_find2","values","isEmpty","stringify","checks","allChecks","alert","obj","find","client_type","then","res","toastMessage","success","msg","err","addClient","omit","_Fragment","FormikProvider","handleSubmit","Grid","container","spacing","item","xs","e","_e$target","_e$target2","_find3","setFieldValue","name","Field","as","TextField","fullWidth","_e$target3","handleTextTranform","touched","Boolean","errors","helperText","handleChange","FormControl","InputLabel","Select","_e$target4","_e$target5","MenuItem","adminRoles","option","i","_e$target6","_e$target7","_find4","Autocomplete","marginTop","clientObj","_clientObj$","unionBy","multiple","options","getOptionLabel","renderInput","renderTags","flatMapDeep","Chip","onDelete","_e$target8","MenuProps","PaperProps","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","selected","_ref3","_localStorage4","_userclientsrows$filt","_userclientsrows$filt2","clientChecks","setClientChecks","clientOrderCheck","setClientOrderCheck","selectedChecks","setSelectedChecks","checksArray","setChecksArray","userclients","userChecks","resp","_userclients$","getClientChecksById","_res$data","_res$data2","_find7","_find8","clientData","clientName","active","check_name","check_id","comparator","obj1","obj2","flatMap","intersectionWith","isObject","_userclients$2","isArray","tableCellStyle","padding","textAlign","md","_e$target9","defaultValue","paddingLeft","paddingTop","Array","_","columnIndex","columnItems","checkDetail","Checkbox","isChecked","prevSelectedChecks","isEqual","handleCheckboxChange","pt","handleAddClientsToUser","Table","TableHead","TableRow","TableCell","TableBody","_ref5","siteTerms","setSiteTerms","selectedTerms","setSelectedTerms","userterms","foundRow","terms","userData","userTermsList","getUserTermValue","termId","term","t","term_value","Card","CardContent","alignItems","term_text","term_type","handleCheckChange","termsDetail","prev","term_name","margin","handleAddTermsToUser","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","fillRule","d"],"sourceRoot":""}