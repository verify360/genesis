{"version":3,"file":"static/js/84.02ff254b.chunk.js","mappings":"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","sources":["views/MasterData/ManageTerms/index.js","../node_modules/@mui/icons-material/DeleteOutlined.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Tab,\r\n  Tabs,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n  Select,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport {\r\n  GridRowModes,\r\n  DataGrid,\r\n  gridClasses,\r\n  GridToolbar,\r\n  GridToolbarContainer,\r\n  GridActionsCellItem,\r\n  GridRowEditStopReasons,\r\n} from '@mui/x-data-grid';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Radio from '@mui/material/Radio';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport RequestsApi from 'api/requests';\r\nimport '../Style.css';\r\n\r\nconst validationSchema = Yup.object({\r\n  // term_name: Yup.string().required('Required'),\r\n  term_text: Yup.string().required('Required'),\r\n  term_type: Yup.string().required('Required'),\r\n  term_component: Yup.string().required('Required'),\r\n});\r\n\r\nconst ManageUserTerms = () => {\r\n  const [userTerms, setUserTerms] = useState([]);\r\n  const [rowEdit, setRowEdit] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const iValues = {\r\n    id: 999999,\r\n    term_for: 'user',\r\n    term_name: '',\r\n    term_text: '',\r\n    term_type: '',\r\n    term_component: '',\r\n    term_value: '',\r\n  };\r\n  const columns = [\r\n    {\r\n      field: 'term_text',\r\n      headerName: 'TERM TEXT',\r\n      width: 550,\r\n    },\r\n    {\r\n      field: 'term_type',\r\n      headerName: 'TERM TYPE',\r\n      width: 100,\r\n    },\r\n    {\r\n      field: 'term_component',\r\n      headerName: 'TERM COMPONENT',\r\n      width: 180,\r\n    },\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'ACTION',\r\n      width: 100,\r\n      cellClassName: 'actions',\r\n      getActions: (row) => {\r\n        return [\r\n          <GridActionsCellItem\r\n            color='inherit'\r\n            icon={<EditIcon />}\r\n            label='Edit'\r\n            className='textPrimary'\r\n            onClick={handleEdit(row.id)}\r\n          />,\r\n          <GridActionsCellItem\r\n            color='inherit'\r\n            icon={<DeleteIcon />}\r\n            label='Delete'\r\n            onClick={handleDelete(row.id)}\r\n          />,\r\n        ];\r\n      },\r\n    },\r\n  ];\r\n\r\n  // const [initialValues, setInitialValues] = useState(iValues);\r\n\r\n  // fetchFormData(iValues);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await RequestsApi.ListUserTerms('user');\r\n\r\n      if (response?.status === 200) {\r\n        let resData = response.data.data;\r\n        setUserTerms(JSON.parse(resData));\r\n      } else {\r\n        console.error('Unexpected response status:', response?.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n    initialValues: iValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      const newTerm = { id: userTerms.length + 1, term_for: 'user', ...values };\r\n      newTerm.term_name = newTerm.term_component.trim().replaceAll(' ', '_');\r\n      let response = RequestsApi.UpdateTerms({\r\n        id: newTerm['id'],\r\n        data: newTerm,\r\n      });\r\n\r\n      if (response.data && response.data.success === false) {\r\n        return setError(response.data.msg);\r\n      }\r\n      formik.resetForm();\r\n      fetchData();\r\n    },\r\n  });\r\n\r\n  const handleEdit = (id) => () => {\r\n    const updatedTerms = userTerms.filter((term) => term.id === id)[0];\r\n    formik.resetForm({ values: updatedTerms });\r\n  };\r\n\r\n  const handleDelete = (id) => () => {\r\n    const updatedTerms = userTerms.filter((term) => term.id !== id);\r\n    setUserTerms(updatedTerms);\r\n  };\r\n\r\n  return (\r\n    <Box component='form' onSubmit={formik.handleSubmit}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Add User Term\r\n              </Typography>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={3}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <TextField\r\n                      fullWidth\r\n                      multiline\r\n                      // rows={2}\r\n                      id='term_text'\r\n                      name='term_text'\r\n                      label='Term Text'\r\n                      value={formik.values.term_text}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_text &&\r\n                        Boolean(formik.errors.term_text)\r\n                      }\r\n                      helperText={\r\n                        formik.touched.term_text && formik.errors.term_text\r\n                      }\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <InputLabel htmlFor='term_type'> Type</InputLabel>\r\n                    <Select\r\n                      fullWidth\r\n                      labelId='Term Type'\r\n                      id='term_type'\r\n                      name='term_type'\r\n                      value={formik.values.term_type}\r\n                      onChange={(e) => {\r\n                        formik?.setFieldValue('term_type', e?.target?.value);\r\n                        if (e?.target?.value === 'boolean') {\r\n                          formik?.setFieldValue('term_value', 'Yes, No');\r\n                        } else if (e?.target?.value === 'hide/show') {\r\n                          formik?.setFieldValue('term_value', 'Hide, Show');\r\n                        }\r\n                      }}\r\n                      error={\r\n                        formik.touched.term_type &&\r\n                        Boolean(formik.errors.term_type)\r\n                      }\r\n                    >\r\n                      <MenuItem value='hide/show'>Hide/Show</MenuItem>\r\n                      <MenuItem value='boolean'>Boolean</MenuItem>\r\n                      <MenuItem value='choice'>Choice</MenuItem>\r\n                      <MenuItem value='text'>Text</MenuItem>\r\n                      <MenuItem value='file'>File</MenuItem>\r\n                      <MenuItem value='link'>Link</MenuItem>\r\n                      <MenuItem value='html'>HTML</MenuItem>\r\n                      <MenuItem value='json'>JSON</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <InputLabel htmlFor='term_type'> Component</InputLabel>\r\n                    <Select\r\n                      fullWidth\r\n                      labelId='Term Type'\r\n                      id='term_component'\r\n                      name='term_component'\r\n                      value={formik.values.term_component}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_component &&\r\n                        Boolean(formik.errors.term_component)\r\n                      }\r\n                    >\r\n                      <MenuItem value='Order Form'>Order Form</MenuItem>\r\n                      <MenuItem value='Adjudication Report'>\r\n                        Adjudication Report\r\n                      </MenuItem>\r\n                      <MenuItem value='Billing '>Billing </MenuItem>\r\n                      <MenuItem value='Reports'>Reports</MenuItem>\r\n                      <MenuItem value='Data Retention'>Data Retention</MenuItem>\r\n                      <MenuItem value='Restricted Package'>\r\n                        Restricted Package\r\n                      </MenuItem>\r\n                      <MenuItem value='Billing'>Billing</MenuItem>\r\n                      <MenuItem value='Reports'>Reports</MenuItem>\r\n                      <MenuItem value='Login'>Login</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <TextField\r\n                      fullWidth\r\n                      multiline\r\n                      // rows={2}\r\n                      id='term_value'\r\n                      name='term_value'\r\n                      label='Term Value'\r\n                      value={formik.values.term_value}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_value &&\r\n                        Boolean(formik.errors.term_value)\r\n                      }\r\n                      helperText={\r\n                        formik.touched.term_value && formik.errors.term_value\r\n                      }\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* {formik.values.term_type === 'boolean' ? (\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Radio\r\n                                                checked={formik.values.term_value === true}\r\n                                                // value={formik.values.term_value}\r\n                                                onChange={formik.handleChange}\r\n                                                error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                                // helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                                name=\"term_value\"\r\n                                            />\r\n                                        }\r\n                                        label=\"True\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Radio\r\n                                                checked={formik.values.term_value === false}\r\n                                                // value={formik.values.term_value}\r\n                                                onChange={formik.handleChange}\r\n                                                error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                                // helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                                name=\"term_value\"\r\n                                            />\r\n                                        }\r\n                                        label=\"False\"\r\n                                    />\r\n                                </FormGroup>\r\n                            ) : (\r\n                                <TextField\r\n                                    label=\"Term Value\"\r\n                                    name=\"term_value\"\r\n                                    value={formik.values.term_value}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                    helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                    margin=\"normal\"\r\n                                />\r\n                            )} */}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button variant='contained' color='primary' type='submit'>\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            {loading ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center' , padding:20}}>\r\n                <CircularProgress color='inherit' size={20} />\r\n              </div>\r\n            ) : (\r\n              <CardContent>\r\n                <Typography variant='h6' gutterBottom>\r\n                  User Terms\r\n                </Typography>\r\n                <Box\r\n                  sx={{\r\n                    // height: 500,\r\n                    width: '100%',\r\n                    '& .actions': {\r\n                      color: 'text.secondary',\r\n                    },\r\n                    '& .textPrimary': {\r\n                      color: 'text.primary',\r\n                      fontSize: '10px',\r\n                    },\r\n                    '& .MuiDataGrid-cellContent': {\r\n                      color: 'text.primary',\r\n                      fontSize: '10px',\r\n                    },\r\n                    '& .MuiDataGrid-columnHeaderTitle': {\r\n                      color: '#fff',\r\n                      fontSize: '10px',\r\n                      fontWeight: 'bold',\r\n                    },\r\n                    '& .MuiDataGrid-columnHeader': {\r\n                      bgcolor: '#4A4A4A',\r\n                    },\r\n                    '& .MuiDataGrid-columnHeaders': {\r\n                      bgcolor: '#4A4A4A',\r\n                    },\r\n                    '& .MuiDataGrid-row': {\r\n                      '&:nth-of-type(even)': {\r\n                        backgroundColor: '#E5E5E5',\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <DataGrid\r\n                    rows={userTerms}\r\n                    columns={columns}\r\n                    editMode='row'\r\n                    // checkboxSelection\r\n                    disableRowSelectionOnClick\r\n                    // editMode=\"row\"   // rowModesModel={rowModesModel}    // onRowModesModelChange={handleRowModesModelChange}    // onRowEditStop={handleRowEditStop}    // processRowUpdate={processRowUpdate}\r\n                    // onRowDeleteConfirmation={handleRowDeleteConfirmation}\r\n                    slots={{\r\n                      toolbar: GridToolbar,\r\n                    }}\r\n                    // slotProps={{    //     toolbar: { setRows, setRowModesModel },    // }}\r\n                    getRowClassName={(params) =>\r\n                      params.indexRelativeToCurrentPage % 2 === 0\r\n                        ? 'even'\r\n                        : 'odd'\r\n                    }\r\n                  />\r\n                </Box>\r\n\r\n                {/* {userTerms.map((term) => (\r\n                                <Box key={term.id} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                    <Typography>{`${term.term_name} (${term.term_type}) - ${term.term_value}`}</Typography>\r\n                                    <Button color=\"error\" onClick={() => handleEdit(term.id)}>\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button color=\"error\" onClick={() => handleDelete(term.id)}>\r\n                                        Delete\r\n                                    </Button>\r\n                                </Box>\r\n                            ))} */}\r\n              </CardContent>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ManageClientTerms = () => {\r\n  const [clientTerms, setClientTerms] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  // const [rowEdit, setRowEdit] = useState([]);\r\n  const iValues = {\r\n    id: 999999,\r\n    term_for: 'client',\r\n    term_name: '',\r\n    term_text: '',\r\n    term_type: '',\r\n    term_component: '',\r\n    term_value: '',\r\n  };\r\n  // const [initialValues, setInitialValues] = useState(iValues);\r\n  const columns = [\r\n    {\r\n      field: 'term_text',\r\n      headerName: 'TERM TEXT',\r\n      width: 550,\r\n    },\r\n    {\r\n      field: 'term_type',\r\n      headerName: 'TERM TYPE',\r\n      width: 100,\r\n    },\r\n    {\r\n      field: 'term_component',\r\n      headerName: 'TERM COMPONENT',\r\n      width: 180,\r\n    },\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'ACTION',\r\n      width: 100,\r\n      cellClassName: 'actions',\r\n      getActions: (row) => {\r\n        return [\r\n          <GridActionsCellItem\r\n            color='inherit'\r\n            icon={<EditIcon />}\r\n            label='Edit'\r\n            className='textPrimary'\r\n            onClick={handleEdit(row.id)}\r\n          />,\r\n          <GridActionsCellItem\r\n            color='inherit'\r\n            icon={<DeleteIcon />}\r\n            label='Delete'\r\n            onClick={handleDelete(row.id)}\r\n          />,\r\n        ];\r\n      },\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true)\r\n      try {\r\n        let response = await RequestsApi.ListUserTerms('client');\r\n        let resData = response.data.data;\r\n        setClientTerms(JSON.parse(resData));\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const formik = useFormik({\r\n    initialValues: iValues,\r\n    validationSchema,\r\n    onSubmit: (values) => {\r\n      const newTerm = {\r\n        id: clientTerms.length + 1,\r\n        term_for: 'client',\r\n        ...values,\r\n      };\r\n      newTerm.term_name = newTerm.term_component.trim().replaceAll(' ', '_');\r\n      let response = RequestsApi.UpdateTerms({\r\n        id: newTerm['id'],\r\n        data: newTerm,\r\n      });\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  const handleEdit = (id) => () => {\r\n    const updatedTerms = clientTerms.filter((term) => term.id === id)[0];\r\n    formik.resetForm({ values: updatedTerms });\r\n  };\r\n\r\n  const handleDelete = (id) => () => {\r\n    const updatedTerms = clientTerms.filter((term) => term.id !== id);\r\n    setClientTerms(updatedTerms);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component='form'\r\n      onSubmit={formik.handleSubmit}\r\n      noValidate\r\n      autoComplete='off'\r\n    >\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Add Client Term\r\n              </Typography>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={3}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <TextField\r\n                      fullWidth\r\n                      multiline\r\n                      // rows={2}\r\n                      id='term_text'\r\n                      name='term_text'\r\n                      label='Term Text'\r\n                      value={formik.values.term_text}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_text &&\r\n                        Boolean(formik.errors.term_text)\r\n                      }\r\n                      helperText={\r\n                        formik.touched.term_text && formik.errors.term_text\r\n                      }\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <InputLabel htmlFor='term_type'> Type</InputLabel>\r\n                    <Select\r\n                      fullWidth\r\n                      labelId='Term Type'\r\n                      id='term_type'\r\n                      name='term_type'\r\n                      value={formik.values.term_type}\r\n                      // onChange={(e) => {\r\n                      //     formik.values.term_value = handleTermTypeChange(e, formik.setFieldValue, formik.values.term_value)}}\r\n                      onChange={(e) => {\r\n                        formik?.setFieldValue('term_type', e?.target?.value);\r\n                        if (e?.target?.value === 'boolean') {\r\n                          formik?.setFieldValue('term_value', 'Yes, No');\r\n                        } else if (e?.target?.value === 'hide/show') {\r\n                          formik?.setFieldValue('term_value', 'Hide, Show');\r\n                        }\r\n                      }}\r\n                      error={\r\n                        formik.touched.term_type &&\r\n                        Boolean(formik.errors.term_type)\r\n                      }\r\n                      // helperText={formik.touched.term_type && formik.errors.term_type}\r\n                    >\r\n                      <MenuItem value='hide/show'>Hide/Show</MenuItem>\r\n                      <MenuItem value='boolean'>Boolean</MenuItem>\r\n                      <MenuItem value='choice'>Choice</MenuItem>\r\n                      <MenuItem value='text'>Text</MenuItem>\r\n                      <MenuItem value='file'>File</MenuItem>\r\n                      <MenuItem value='link'>Link</MenuItem>\r\n                      <MenuItem value='html'>HTML</MenuItem>\r\n                      <MenuItem value='json'>JSON</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <InputLabel htmlFor='term_type'>Component</InputLabel>\r\n                    <Select\r\n                      fullWidth\r\n                      labelId='Term Type'\r\n                      id='term_component'\r\n                      name='term_component'\r\n                      value={formik.values.term_component}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_component &&\r\n                        Boolean(formik.errors.term_component)\r\n                      }\r\n                      // helperText={formik.touched.term_type && formik.errors.term_type}\r\n                    >\r\n                      <MenuItem value='Order Form'>Order Form</MenuItem>\r\n                      <MenuItem value='Adjudication Report'>\r\n                        Adjudication Report\r\n                      </MenuItem>\r\n                      <MenuItem value='Billing '>Billing </MenuItem>\r\n                      <MenuItem value='Reports'>Reports</MenuItem>\r\n                      <MenuItem value='Data Retention'>Data Retention</MenuItem>\r\n                      <MenuItem value='Restricted Package'>\r\n                        Restricted Package\r\n                      </MenuItem>\r\n                      <MenuItem value='Billing'>Billing</MenuItem>\r\n                      <MenuItem value='Reports'>Reports</MenuItem>\r\n                      <MenuItem value='Login'>Login</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl fullWidth margin='normal'>\r\n                    <TextField\r\n                      fullWidth\r\n                      multiline\r\n                      // rows={2}\r\n                      id='term_value'\r\n                      name='term_value'\r\n                      label='Term Value'\r\n                      value={formik.values.term_value}\r\n                      onChange={formik.handleChange}\r\n                      error={\r\n                        formik.touched.term_value &&\r\n                        Boolean(formik.errors.term_value)\r\n                      }\r\n                      helperText={\r\n                        formik.touched.term_value && formik.errors.term_value\r\n                      }\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n              </Grid>\r\n              {/* {formik.values.term_type === 'boolean' ? (\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Radio\r\n                                                checked={formik.values.term_value === true}\r\n                                                // value={formik.values.term_value}\r\n                                                onChange={formik.handleChange}\r\n                                                error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                                // helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                                name=\"term_value\"\r\n                                            />\r\n                                        }\r\n                                        label=\"True\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Radio\r\n                                                checked={formik.values.term_value === false}\r\n                                                // value={formik.values.term_value}\r\n                                                onChange={formik.handleChange}\r\n                                                error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                                // helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                                name=\"term_value\"\r\n                                            />\r\n                                        }\r\n                                        label=\"False\"\r\n                                    />\r\n                                </FormGroup>\r\n                            ) : (\r\n                                <TextField\r\n                                    label=\"Term Value\"\r\n                                    name=\"term_value\"\r\n                                    value={formik.values.term_value}\r\n                                    onChange={formik.handleChange}\r\n                                    error={formik.touched.term_value && Boolean(formik.errors.term_value)}\r\n                                    helperText={formik.touched.term_value && formik.errors.term_value}\r\n                                    margin=\"normal\"\r\n                                />\r\n                            )} */}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button variant='contained' color='primary' type='submit'>\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Card>\r\n          {loading ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center' , padding:20}}>\r\n                <CircularProgress color='inherit' size={20} />\r\n              </div>\r\n            ) : (\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Client Terms\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  // height: 500,\r\n                  width: '100%',\r\n                  '& .actions': {\r\n                    color: 'text.secondary',\r\n                  },\r\n                  '& .textPrimary': {\r\n                    color: 'text.primary',\r\n                    fontSize: '10px',\r\n                  },\r\n                  '& .MuiDataGrid-cellContent': {\r\n                    color: 'text.primary',\r\n                    fontSize: '10px',\r\n                  },\r\n                  '& .MuiDataGrid-columnHeaderTitle': {\r\n                    color: '#fff',\r\n                    fontSize: '10px',\r\n                    fontWeight: 'bold',\r\n                  },\r\n                  '& .MuiDataGrid-columnHeader': {\r\n                    bgcolor: '#4A4A4A',\r\n                  },\r\n                  '& .MuiDataGrid-columnHeaders': {\r\n                    bgcolor: '#4A4A4A',\r\n                  },\r\n                  '& .MuiDataGrid-row': {\r\n                    '&:nth-of-type(even)': {\r\n                      backgroundColor: '#E5E5E5',\r\n                    },\r\n                  },\r\n                }}\r\n              >\r\n                <DataGrid\r\n                  rows={clientTerms}\r\n                  columns={columns}\r\n                  // checkboxSelection\r\n                  disableRowSelectionOnClick\r\n                  // editMode=\"row\"   // rowModesModel={rowModesModel}    // onRowModesModelChange={handleRowModesModelChange}    // onRowEditStop={handleRowEditStop}    // processRowUpdate={processRowUpdate}\r\n                  // onRowDeleteConfirmation={handleRowDeleteConfirmation}\r\n                  slots={{\r\n                    toolbar: GridToolbar,\r\n                  }}\r\n                  // slotProps={{    //     toolbar: { setRows, setRowModesModel },    // }}\r\n                  getRowClassName={(params) =>\r\n                    params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n                  }\r\n                />\r\n              </Box>\r\n\r\n              {/* {clientTerms.map((term) => (\r\n                                <Box key={term.id} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                                    <Typography>{`${term.term_name} (${term.term_type}) - ${term.term_value}`}</Typography>\r\n                                    <Button color=\"error\" onClick={() => handleEdit(term.id)}>\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button color=\"error\" onClick={() => handleDelete(term.id)}>\r\n                                        Delete\r\n                                    </Button>\r\n                                </Box>\r\n                            ))} */}\r\n            </CardContent>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst ManageTerms = () => {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          borderBottom: 1,\r\n          borderColor: 'divider',\r\n          gap: 4,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleTabChange}\r\n          aria-label='basic tabs example'\r\n        >\r\n          <Tab label='User Terms'></Tab>\r\n          <Tab label='Client Terms'></Tab>\r\n        </Tabs>\r\n\r\n        <div>\r\n          {value === 0 && <ManageUserTerms></ManageUserTerms>}\r\n          {value === 1 && <ManageClientTerms></ManageClientTerms>}\r\n        </div>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageTerms;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"\n}), 'DeleteOutlined');\nexports.default = _default;"],"names":["validationSchema","Yup","term_text","required","term_type","term_component","ManageUserTerms","userTerms","setUserTerms","useState","rowEdit","setRowEdit","loading","setLoading","error","setError","columns","field","headerName","width","type","cellClassName","getActions","row","_jsx","GridActionsCellItem","color","icon","EditIcon","label","className","onClick","handleEdit","id","DeleteIcon","handleDelete","fetchData","async","response","RequestsApi","status","resData","data","JSON","parse","console","useEffect","formik","useFormik","initialValues","term_for","term_name","term_value","onSubmit","values","newTerm","length","trim","replaceAll","success","msg","resetForm","updatedTerms","filter","term","Box","component","handleSubmit","children","_jsxs","Grid","container","spacing","item","xs","Card","CardContent","Typography","variant","gutterBottom","FormControl","fullWidth","margin","TextField","multiline","name","value","onChange","handleChange","touched","Boolean","errors","helperText","InputLabel","htmlFor","Select","labelId","e","_e$target","_e$target2","_e$target3","setFieldValue","target","MenuItem","Button","style","display","justifyContent","padding","CircularProgress","size","sx","fontSize","fontWeight","bgcolor","backgroundColor","DataGrid","rows","editMode","disableRowSelectionOnClick","slots","toolbar","GridToolbar","getRowClassName","params","indexRelativeToCurrentPage","ManageClientTerms","clientTerms","setClientTerms","noValidate","autoComplete","_e$target4","_e$target5","_e$target6","ManageTerms","setValue","React","_Fragment","borderBottom","borderColor","gap","flexDirection","Tabs","handleTabChange","event","newValue","Tab","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}