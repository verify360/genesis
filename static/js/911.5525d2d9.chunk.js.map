{"version":3,"file":"static/js/911.5525d2d9.chunk.js","mappings":"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","sources":["views/MasterData/PackageMaster/index.jsx"],"sourcesContent":["import React, { useEffect, Fragment, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { InputLabel, Checkbox, Select, Table, TableContainer, TableBody, TableCell, TableRow, FormControlLabel } from '@mui/material';\r\nimport { CssBaseline, Divider, Drawer, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Toolbar, Typography } from \"@mui/material\";\r\n// import MenuItem from '@mui/material/MenuItem';\r\nimport RequestsApi from \"api/requests\";\r\n\r\n\r\nfunction PackageMaster() {\r\n    // const [data, setData] = useState([]);\r\n    // const [loading, setLoading] = useState(True);\r\n    const [packagesList, setPackagesList] = useState([]);\r\n    const [checksList, setChecksList] = useState([]);\r\n    // const checksValues = [];\r\n\r\n\r\n    let response = [];\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            try {\r\n                response = RequestsApi.ListPackages();\r\n                response.then((resp) => {\r\n                    setPackagesList(JSON.parse(resp.data.data));\r\n                })\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    response = [];\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            try {\r\n                response = RequestsApi.ListChecks();\r\n                response.then((resp) => {\r\n                    setChecksList(JSON.parse(resp.data.data));\r\n                })\r\n            } catch (error) {\r\n                console.error(\"Error fetching data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <TableContainer>\r\n                <Table variant='striped' className='tableChild' width=\"100%\" cellPadding=\"3\">\r\n                    <TableBody>\r\n                        {packagesList.map((item, index) => (\r\n                            <Fragment key={'p' + index}>\r\n                                <TableRow>\r\n                                    <TableCell width=\"70%\">\r\n                                        {/* <span>{item.package_name}</span> */}\r\n                                        <TableContainer>\r\n                                            <Table variant='striped' className='tableChild' width=\"100%\" cellPadding=\"3\">\r\n                                                <TableBody>\r\n                                                    {checksList.map((item, index) => (\r\n                                                        <Fragment key={index}>\r\n                                                            <TableRow>\r\n                                                                <TableCell width=\"70%\">\r\n                                                                    <span>{item.check_name}</span>\r\n                                                                    <FormControlLabel control={\r\n                                                                        <Checkbox\r\n                                                                            name='category'\r\n                                                                            value={item.checkName}\r\n                                                                            // onChange={(e) => handleChecksChange(e, index)}\r\n                                                                            checked={item.isAdded}\r\n                                                                            variant=\"outlined\"\r\n                                                                        />\r\n                                                                    } label={item.checkName} />\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                        </Fragment>\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n\r\n                                    </TableCell>\r\n                                    <TableCell width=\"30%\">\r\n                                        <Drawer sx={{\r\n                                            width: '200px',\r\n                                            flexShrink: 0,\r\n                                            \"& .MuiDrawer-paper\": {\r\n                                                width: '200px',\r\n                                                boxSizing: \"border-box\",\r\n                                                position: \"relative\",\r\n                                                zIndex: \"1000\",\r\n                                            },\r\n                                        }} variant=\"permanent\" anchor=\"left\">\r\n                                            <Toolbar style={{\r\n                                                background: \"gainsboro\",\r\n                                                display: \"grid\",\r\n                                                placeItems: \"center\",\r\n                                                color: \"#1976d2\",\r\n                                                fontWeight: \"bolder\",\r\n\r\n                                            }}>\r\n                                                Package List\r\n                                            </Toolbar>\r\n                                            <Divider />\r\n                                            {/* <span>{JSON.stringify(packagesList)}</span> */}\r\n                                            <List>\r\n                                                {packagesList.map((check, i) => (\r\n                                                        <ListItem key={Math.random()+i} style={{\r\n                                                            paddingLeft: '1px',\r\n                                                            paddingRight: '1px',\r\n                                                            paddingTop: '2px',\r\n                                                            paddingBottom: '2px',\r\n                                                            borderBottom: '1px #CCC',\r\n                                                            background: (i % 2 ? \"#d5dafb\" : \"white\")\r\n                                                        }}>\r\n                                                            {/* <ListItemButton onClick={() => handleClick(check)} style={{ */}\r\n                                                            <ListItemButton onClick={() => {}} style={{\r\n                                                                paddingTop: '2px',\r\n                                                                paddingBottom: '2px',\r\n                                                                borderBottom: '1px #CCC',\r\n                                                            }}>\r\n                                                                <ListItemText primary={check.package_name} />\r\n                                                            </ListItemButton>\r\n                                                        </ListItem >\r\n                                                ))}\r\n                                            </List>\r\n                                        </Drawer >\r\n\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </Fragment>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default PackageMaster;\r\n"],"names":["packagesList","setPackagesList","useState","checksList","setChecksList","response","useEffect","fetchData","RequestsApi","then","resp","JSON","parse","data","error","console","_jsx","_Fragment","children","TableContainer","Table","variant","className","width","cellPadding","TableBody","map","item","index","Fragment","_jsxs","TableRow","TableCell","check_name","FormControlLabel","control","Checkbox","name","value","checkName","checked","isAdded","label","Drawer","sx","flexShrink","boxSizing","position","zIndex","anchor","Toolbar","style","background","display","placeItems","color","fontWeight","Divider","List","check","i","ListItem","paddingLeft","paddingRight","paddingTop","paddingBottom","borderBottom","ListItemButton","onClick","ListItemText","primary","package_name","Math","random"],"sourceRoot":""}